// Code generated by schema-generate. DO NOT EDIT.

package v1beta2

import (
    "bytes"
    "errors"
    "encoding/json"
)

// ConditionsItems 
type ConditionsItems struct {

  // Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
  LastTransitionTime string `json:"lastTransitionTime,omitempty"`

  // Human-readable message indicating details about the condition's last transition.
  Message string `json:"message,omitempty"`

  // The reason for the condition's last transition (a single word in CamelCase).
  Reason string `json:"reason,omitempty"`

  // The status of the condition, either True, False or Unknown.
  Status string `json:"status,omitempty"`

  // The unique identifier of a condition, used to distinguish between other conditions in the resource.
  Type string `json:"type,omitempty"`
}

// MatchExpressionsItems 
type MatchExpressionsItems struct {
  Key string `json:"key,omitempty"`
  Operator string `json:"operator,omitempty"`
  Values []string `json:"values,omitempty"`
}

// MatchLabels 
type MatchLabels struct {
}

// PodsItems 
type PodsItems struct {
}

// Selector Selector is a label query which matches all the pods managed by this `StrimziPodSet`. Only `matchLabels` is supported. If `matchExpressions` is set, it will be ignored.
type Selector struct {
  MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`
  MatchLabels *MatchLabels `json:"matchLabels,omitempty"`
}

// Spec The specification of the StrimziPodSet.
type Spec struct {

  // The Pods managed by this StrimziPodSet.
  Pods []*PodsItems `json:"pods"`

  // Selector is a label query which matches all the pods managed by this `StrimziPodSet`. Only `matchLabels` is supported. If `matchExpressions` is set, it will be ignored.
  Selector *Selector `json:"selector"`
}

// Status The status of the StrimziPodSet.
type Status struct {

  // List of status conditions.
  Conditions []*ConditionsItems `json:"conditions,omitempty"`

  // Number of pods managed by this `StrimziPodSet` resource that have the current revision.
  CurrentPods int `json:"currentPods,omitempty"`

  // The generation of the CRD that was last reconciled by the operator.
  ObservedGeneration int `json:"observedGeneration,omitempty"`

  // Number of pods managed by this `StrimziPodSet` resource.
  Pods int `json:"pods,omitempty"`

  // Number of pods managed by this `StrimziPodSet` resource that are ready.
  ReadyPods int `json:"readyPods,omitempty"`
}

// StrimziPodSet 
type StrimziPodSet struct {

  // The specification of the StrimziPodSet.
  Spec *Spec `json:"spec,omitempty"`

  // The status of the StrimziPodSet.
  Status *Status `json:"status,omitempty"`
}

func (strct *Spec) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Pods" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "pods" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"pods\": ")
	if tmp, err := json.Marshal(strct.Pods); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Selector" field is required
    if strct.Selector == nil {
        return nil, errors.New("selector is a required field")
    }
    // Marshal the "selector" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"selector\": ")
	if tmp, err := json.Marshal(strct.Selector); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Spec) UnmarshalJSON(b []byte) error {
    podsReceived := false
    selectorReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "pods":
            if err := json.Unmarshal([]byte(v), &strct.Pods); err != nil {
                return err
             }
            podsReceived = true
        case "selector":
            if err := json.Unmarshal([]byte(v), &strct.Selector); err != nil {
                return err
             }
            selectorReceived = true
        }
    }
    // check if pods (a required property) was received
    if !podsReceived {
        return errors.New("\"pods\" is required but was not present")
    }
    // check if selector (a required property) was received
    if !selectorReceived {
        return errors.New("\"selector\" is required but was not present")
    }
    return nil
}
