// Code generated by schema-generate. DO NOT EDIT.

package v1beta2

import (
    "bytes"
    "encoding/json"
    "errors"
)

// AccessToken Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
type AccessToken struct {

  // The key under which the secret value is stored in the Kubernetes Secret.
  Key string `json:"key"`

  // The name of the Kubernetes Secret containing the secret value.
  SecretName string `json:"secretName"`
}

// Affinity The pod's affinity rules.
type Affinity struct {
  NodeAffinity *NodeAffinity `json:"nodeAffinity,omitempty"`
  PodAffinity *PodAffinity `json:"podAffinity,omitempty"`
  PodAntiAffinity *PodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

// Annotations Annotations added to the Kubernetes resource.
type Annotations struct {
}

// Authentication Authentication configuration for connecting to the cluster.
type Authentication struct {

  // Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
  AccessToken *AccessToken `json:"accessToken,omitempty"`

  // Configure whether access token should be treated as JWT. This should be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
  AccessTokenIsJwt bool `json:"accessTokenIsJwt,omitempty"`

  // OAuth audience to use when authenticating against the authorization server. Some authorization servers require the audience to be explicitly set. The possible values depend on how the authorization server is configured. By default, `audience` is not specified when performing the token endpoint request.
  Audience string `json:"audience,omitempty"`

  // Reference to the `Secret` which holds the certificate and private key pair.
  CertificateAndKey *CertificateAndKey `json:"certificateAndKey,omitempty"`

  // OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
  ClientId string `json:"clientId,omitempty"`

  // Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
  ClientSecret *ClientSecret `json:"clientSecret,omitempty"`

  // The connect timeout in seconds when connecting to authorization server. If not set, the effective connect timeout is 60 seconds.
  ConnectTimeoutSeconds int `json:"connectTimeoutSeconds,omitempty"`

  // Enable or disable TLS hostname verification. Default value is `false`.
  DisableTlsHostnameVerification bool `json:"disableTlsHostnameVerification,omitempty"`

  // Enable or disable OAuth metrics. Default value is `false`.
  EnableMetrics bool `json:"enableMetrics,omitempty"`

  // The maximum number of retries to attempt if an initial HTTP request fails. If not set, the default is to not attempt any retries.
  HttpRetries int `json:"httpRetries,omitempty"`

  // The pause to take before retrying a failed HTTP request. If not set, the default is to not pause at all but to immediately repeat a request.
  HttpRetryPauseMs int `json:"httpRetryPauseMs,omitempty"`

  // Set or limit time-to-live of the access tokens to the specified number of seconds. This should be set if the authorization server returns opaque tokens.
  MaxTokenExpirySeconds int `json:"maxTokenExpirySeconds,omitempty"`

  // Reference to the `Secret` which holds the password.
  PasswordSecret *PasswordSecret `json:"passwordSecret,omitempty"`

  // The read timeout in seconds when connecting to authorization server. If not set, the effective read timeout is 60 seconds.
  ReadTimeoutSeconds int `json:"readTimeoutSeconds,omitempty"`

  // Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
  RefreshToken *RefreshToken `json:"refreshToken,omitempty"`

  // OAuth scope to use when authenticating against the authorization server. Some authorization servers require this to be set. The possible values depend on how authorization server is configured. By default `scope` is not specified when doing the token endpoint request.
  Scope string `json:"scope,omitempty"`

  // Trusted certificates for TLS connection to the OAuth server.
  TlsTrustedCertificates []*TlsTrustedCertificatesItems `json:"tlsTrustedCertificates,omitempty"`

  // Authorization server token endpoint URI.
  TokenEndpointUri string `json:"tokenEndpointUri,omitempty"`

  // Authentication type. Currently the supported types are `tls`, `scram-sha-256`, `scram-sha-512`, `plain`, and 'oauth'. `scram-sha-256` and `scram-sha-512` types use SASL SCRAM-SHA-256 and SASL SCRAM-SHA-512 Authentication, respectively. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
  Type string `json:"type"`

  // Username used for the authentication.
  Username string `json:"username,omitempty"`
}

// Capabilities 
type Capabilities struct {
  Add []string `json:"add,omitempty"`
  Drop []string `json:"drop,omitempty"`
}

// CertificateAndKey Reference to the `Secret` which holds the certificate and private key pair.
type CertificateAndKey struct {

  // The name of the file certificate in the Secret.
  Certificate string `json:"certificate"`

  // The name of the private key in the Secret.
  Key string `json:"key"`

  // The name of the Secret containing the certificate.
  SecretName string `json:"secretName"`
}

// ClaimsItems 
type ClaimsItems struct {
  Name string `json:"name,omitempty"`
}

// ClientSecret Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
type ClientSecret struct {

  // The key under which the secret value is stored in the Kubernetes Secret.
  Key string `json:"key"`

  // The name of the Kubernetes Secret containing the secret value.
  SecretName string `json:"secretName"`
}

// ConditionsItems 
type ConditionsItems struct {

  // Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
  LastTransitionTime string `json:"lastTransitionTime,omitempty"`

  // Human-readable message indicating details about the condition's last transition.
  Message string `json:"message,omitempty"`

  // The reason for the condition's last transition (a single word in CamelCase).
  Reason string `json:"reason,omitempty"`

  // The status of the condition, either True, False or Unknown.
  Status string `json:"status,omitempty"`

  // The unique identifier of a condition, used to distinguish between other conditions in the resource.
  Type string `json:"type,omitempty"`
}

// Config The MirrorMaker producer config. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, sasl., security., interceptor.classes (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
type Config struct {
}

// ConfigMapKeyRef Reference to the key in the ConfigMap containing the configuration.
type ConfigMapKeyRef struct {
  Key string `json:"key,omitempty"`
  Name string `json:"name,omitempty"`
  Optional bool `json:"optional,omitempty"`
}

// Consumer Configuration of source cluster.
type Consumer struct {

  // Authentication configuration for connecting to the cluster.
  Authentication *Authentication `json:"authentication,omitempty"`

  // A list of host:port pairs for establishing the initial connection to the Kafka cluster.
  BootstrapServers string `json:"bootstrapServers"`

  // The MirrorMaker consumer config. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, group.id, sasl., security., interceptor.classes (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
  Config *Config `json:"config,omitempty"`

  // A unique string that identifies the consumer group this consumer belongs to.
  GroupId string `json:"groupId"`

  // Specifies the number of consumer stream threads to create.
  NumStreams int `json:"numStreams,omitempty"`

  // Specifies the offset auto-commit interval in ms. Default value is 60000.
  OffsetCommitInterval int `json:"offsetCommitInterval,omitempty"`

  // TLS configuration for connecting MirrorMaker to the cluster.
  Tls *Tls `json:"tls,omitempty"`
}

// Deployment Template for Kafka MirrorMaker `Deployment`.
type Deployment struct {

  // Pod replacement strategy for deployment configuration changes. Valid values are `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
  DeploymentStrategy string `json:"deploymentStrategy,omitempty"`

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`
}

// EnvItems 
type EnvItems struct {

  // The environment variable key.
  Name string `json:"name,omitempty"`

  // The environment variable value.
  Value string `json:"value,omitempty"`
}

// HostAliasesItems 
type HostAliasesItems struct {
  Hostnames []string `json:"hostnames,omitempty"`
  Ip string `json:"ip,omitempty"`
}

// ImagePullSecretsItems 
type ImagePullSecretsItems struct {
  Name string `json:"name,omitempty"`
}

// JavaSystemPropertiesItems 
type JavaSystemPropertiesItems struct {

  // The system property name.
  Name string `json:"name,omitempty"`

  // The system property value.
  Value string `json:"value,omitempty"`
}

// JvmOptions JVM Options for pods.
type JvmOptions struct {

  // Specifies whether the Garbage Collection logging is enabled. The default is false.
  GcLoggingEnabled bool `json:"gcLoggingEnabled,omitempty"`

  // A map of additional system properties which will be passed using the `-D` option to the JVM.
  JavaSystemProperties []*JavaSystemPropertiesItems `json:"javaSystemProperties,omitempty"`

  // A map of -XX options to the JVM.
  XX *XX `json:"-XX,omitempty"`

  // -Xms option to to the JVM.
  Xms string `json:"-Xms,omitempty"`

  // -Xmx option to to the JVM.
  Xmx string `json:"-Xmx,omitempty"`
}

// KafkaMirrorMaker 
type KafkaMirrorMaker struct {

  // The specification of Kafka MirrorMaker.
  Spec *Spec `json:"spec,omitempty"`

  // The status of Kafka MirrorMaker.
  Status *Status `json:"status,omitempty"`
}

// LabelSelector 
type LabelSelector struct {
  MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`
  MatchLabels *MatchLabels `json:"matchLabels,omitempty"`
}

// Labels Labels added to the Kubernetes resource.
type Labels struct {
}

// Limits 
type Limits struct {
}

// LivenessProbe Pod liveness checking.
type LivenessProbe struct {

  // Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  FailureThreshold int `json:"failureThreshold,omitempty"`

  // The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.
  InitialDelaySeconds int `json:"initialDelaySeconds,omitempty"`

  // How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  PeriodSeconds int `json:"periodSeconds,omitempty"`

  // Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
  SuccessThreshold int `json:"successThreshold,omitempty"`

  // The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.
  TimeoutSeconds int `json:"timeoutSeconds,omitempty"`
}

// Loggers A Map from logger name to logger level.
type Loggers struct {
}

// Logging Logging configuration for MirrorMaker.
type Logging struct {

  // A Map from logger name to logger level.
  Loggers *Loggers `json:"loggers,omitempty"`

  // Logging type, must be either 'inline' or 'external'.
  Type string `json:"type"`

  // `ConfigMap` entry where the logging configuration is stored. 
  ValueFrom *ValueFrom `json:"valueFrom,omitempty"`
}

// MatchExpressionsItems 
type MatchExpressionsItems struct {
  Key string `json:"key,omitempty"`
  Operator string `json:"operator,omitempty"`
  Values []string `json:"values,omitempty"`
}

// MatchFieldsItems 
type MatchFieldsItems struct {
  Key string `json:"key,omitempty"`
  Operator string `json:"operator,omitempty"`
  Values []string `json:"values,omitempty"`
}

// MatchLabels 
type MatchLabels struct {
}

// Metadata Metadata applied to the resource.
type Metadata struct {

  // Annotations added to the Kubernetes resource.
  Annotations *Annotations `json:"annotations,omitempty"`

  // Labels added to the Kubernetes resource.
  Labels *Labels `json:"labels,omitempty"`
}

// MetricsConfig Metrics configuration.
type MetricsConfig struct {

  // Metrics type. Only 'jmxPrometheusExporter' supported currently.
  Type string `json:"type"`

  // ConfigMap entry where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.
  ValueFrom *ValueFrom `json:"valueFrom"`
}

// MirrorMakerContainer Template for Kafka MirrorMaker container.
type MirrorMakerContainer struct {

  // Environment variables which should be applied to the container.
  Env []*EnvItems `json:"env,omitempty"`

  // Security context for the container.
  SecurityContext *SecurityContext `json:"securityContext,omitempty"`
}

// NamespaceSelector 
type NamespaceSelector struct {
  MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`
  MatchLabels *MatchLabels `json:"matchLabels,omitempty"`
}

// NodeAffinity 
type NodeAffinity struct {
  PreferredDuringSchedulingIgnoredDuringExecution []*PreferredDuringSchedulingIgnoredDuringExecutionItems `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
  RequiredDuringSchedulingIgnoredDuringExecution *RequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// NodeSelectorTermsItems 
type NodeSelectorTermsItems struct {
  MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`
  MatchFields []*MatchFieldsItems `json:"matchFields,omitempty"`
}

// PasswordSecret Reference to the `Secret` which holds the password.
type PasswordSecret struct {

  // The name of the key in the Secret under which the password is stored.
  Password string `json:"password"`

  // The name of the Secret containing the password.
  SecretName string `json:"secretName"`
}

// Pod Template for Kafka MirrorMaker `Pods`.
type Pod struct {

  // The pod's affinity rules.
  Affinity *Affinity `json:"affinity,omitempty"`

  // Indicates whether information about services should be injected into Pod's environment variables.
  EnableServiceLinks bool `json:"enableServiceLinks,omitempty"`

  // The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.
  HostAliases []*HostAliasesItems `json:"hostAliases,omitempty"`

  // List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
  ImagePullSecrets []*ImagePullSecretsItems `json:"imagePullSecrets,omitempty"`

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`

  // The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.
  PriorityClassName string `json:"priorityClassName,omitempty"`

  // The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
  SchedulerName string `json:"schedulerName,omitempty"`

  // Configures pod-level security attributes and common container settings.
  SecurityContext *SecurityContext `json:"securityContext,omitempty"`

  // The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
  TerminationGracePeriodSeconds int `json:"terminationGracePeriodSeconds,omitempty"`

  // Defines the total amount (for example `1Gi`) of local storage required for temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
  TmpDirSizeLimit string `json:"tmpDirSizeLimit,omitempty"`

  // The pod's tolerations.
  Tolerations []*TolerationsItems `json:"tolerations,omitempty"`

  // The pod's topology spread constraints.
  TopologySpreadConstraints []*TopologySpreadConstraintsItems `json:"topologySpreadConstraints,omitempty"`
}

// PodAffinity 
type PodAffinity struct {
  PreferredDuringSchedulingIgnoredDuringExecution []*PreferredDuringSchedulingIgnoredDuringExecutionItems `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
  RequiredDuringSchedulingIgnoredDuringExecution []*RequiredDuringSchedulingIgnoredDuringExecutionItems `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// PodAffinityTerm 
type PodAffinityTerm struct {
  LabelSelector *LabelSelector `json:"labelSelector,omitempty"`
  NamespaceSelector *NamespaceSelector `json:"namespaceSelector,omitempty"`
  Namespaces []string `json:"namespaces,omitempty"`
  TopologyKey string `json:"topologyKey,omitempty"`
}

// PodAntiAffinity 
type PodAntiAffinity struct {
  PreferredDuringSchedulingIgnoredDuringExecution []*PreferredDuringSchedulingIgnoredDuringExecutionItems `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
  RequiredDuringSchedulingIgnoredDuringExecution []*RequiredDuringSchedulingIgnoredDuringExecutionItems `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// PodDisruptionBudget Template for Kafka MirrorMaker `PodDisruptionBudget`.
type PodDisruptionBudget struct {

  // Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
  MaxUnavailable int `json:"maxUnavailable,omitempty"`

  // Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
  Metadata *Metadata `json:"metadata,omitempty"`
}

// Preference 
type Preference struct {
  MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`
  MatchFields []*MatchFieldsItems `json:"matchFields,omitempty"`
}

// PreferredDuringSchedulingIgnoredDuringExecutionItems 
type PreferredDuringSchedulingIgnoredDuringExecutionItems struct {
  PodAffinityTerm *PodAffinityTerm `json:"podAffinityTerm,omitempty"`
  Weight int `json:"weight,omitempty"`
}

// Producer Configuration of target cluster.
type Producer struct {

  // Flag to set the MirrorMaker to exit on a failed send. Default value is `true`.
  AbortOnSendFailure bool `json:"abortOnSendFailure,omitempty"`

  // Authentication configuration for connecting to the cluster.
  Authentication *Authentication `json:"authentication,omitempty"`

  // A list of host:port pairs for establishing the initial connection to the Kafka cluster.
  BootstrapServers string `json:"bootstrapServers"`

  // The MirrorMaker producer config. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, sasl., security., interceptor.classes (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
  Config *Config `json:"config,omitempty"`

  // TLS configuration for connecting MirrorMaker to the cluster.
  Tls *Tls `json:"tls,omitempty"`
}

// ReadinessProbe Pod readiness checking.
type ReadinessProbe struct {

  // Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  FailureThreshold int `json:"failureThreshold,omitempty"`

  // The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.
  InitialDelaySeconds int `json:"initialDelaySeconds,omitempty"`

  // How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  PeriodSeconds int `json:"periodSeconds,omitempty"`

  // Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
  SuccessThreshold int `json:"successThreshold,omitempty"`

  // The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.
  TimeoutSeconds int `json:"timeoutSeconds,omitempty"`
}

// RefreshToken Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
type RefreshToken struct {

  // The key under which the secret value is stored in the Kubernetes Secret.
  Key string `json:"key"`

  // The name of the Kubernetes Secret containing the secret value.
  SecretName string `json:"secretName"`
}

// Requests 
type Requests struct {
}

// RequiredDuringSchedulingIgnoredDuringExecution 
type RequiredDuringSchedulingIgnoredDuringExecution struct {
  NodeSelectorTerms []*NodeSelectorTermsItems `json:"nodeSelectorTerms,omitempty"`
}

// RequiredDuringSchedulingIgnoredDuringExecutionItems 
type RequiredDuringSchedulingIgnoredDuringExecutionItems struct {
  LabelSelector *LabelSelector `json:"labelSelector,omitempty"`
  NamespaceSelector *NamespaceSelector `json:"namespaceSelector,omitempty"`
  Namespaces []string `json:"namespaces,omitempty"`
  TopologyKey string `json:"topologyKey,omitempty"`
}

// Resources CPU and memory resources to reserve.
type Resources struct {
  Claims []*ClaimsItems `json:"claims,omitempty"`
  Limits *Limits `json:"limits,omitempty"`
  Requests *Requests `json:"requests,omitempty"`
}

// SeLinuxOptions 
type SeLinuxOptions struct {
  Level string `json:"level,omitempty"`
  Role string `json:"role,omitempty"`
  Type string `json:"type,omitempty"`
  User string `json:"user,omitempty"`
}

// SeccompProfile 
type SeccompProfile struct {
  LocalhostProfile string `json:"localhostProfile,omitempty"`
  Type string `json:"type,omitempty"`
}

// SecurityContext Configures pod-level security attributes and common container settings.
type SecurityContext struct {
  FsGroup int `json:"fsGroup,omitempty"`
  FsGroupChangePolicy string `json:"fsGroupChangePolicy,omitempty"`
  RunAsGroup int `json:"runAsGroup,omitempty"`
  RunAsNonRoot bool `json:"runAsNonRoot,omitempty"`
  RunAsUser int `json:"runAsUser,omitempty"`
  SeLinuxOptions *SeLinuxOptions `json:"seLinuxOptions,omitempty"`
  SeccompProfile *SeccompProfile `json:"seccompProfile,omitempty"`
  SupplementalGroups []int `json:"supplementalGroups,omitempty"`
  Sysctls []*SysctlsItems `json:"sysctls,omitempty"`
  WindowsOptions *WindowsOptions `json:"windowsOptions,omitempty"`
}

// ServiceAccount Template for the Kafka MirrorMaker service account.
type ServiceAccount struct {

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`
}

// Spec The specification of Kafka MirrorMaker.
type Spec struct {

  // Configuration of source cluster.
  Consumer *Consumer `json:"consumer"`

  // The docker image for the pods.
  Image string `json:"image,omitempty"`

  // List of topics which are included for mirroring. This option allows any regular expression using Java-style regular expressions. Mirroring two topics named A and B is achieved by using the expression `A\|B`. Or, as a special case, you can mirror all topics using the regular expression `*`. You can also specify multiple regular expressions separated by commas.
  Include string `json:"include,omitempty"`

  // JVM Options for pods.
  JvmOptions *JvmOptions `json:"jvmOptions,omitempty"`

  // Pod liveness checking.
  LivenessProbe *LivenessProbe `json:"livenessProbe,omitempty"`

  // Logging configuration for MirrorMaker.
  Logging *Logging `json:"logging,omitempty"`

  // Metrics configuration.
  MetricsConfig *MetricsConfig `json:"metricsConfig,omitempty"`

  // Configuration of target cluster.
  Producer *Producer `json:"producer"`

  // Pod readiness checking.
  ReadinessProbe *ReadinessProbe `json:"readinessProbe,omitempty"`

  // The number of pods in the `Deployment`.
  Replicas int `json:"replicas"`

  // CPU and memory resources to reserve.
  Resources *Resources `json:"resources,omitempty"`

  // Template to specify how Kafka MirrorMaker resources, `Deployments` and `Pods`, are generated.
  Template *Template `json:"template,omitempty"`

  // The configuration of tracing in Kafka MirrorMaker.
  Tracing *Tracing `json:"tracing,omitempty"`

  // The Kafka MirrorMaker version. Defaults to {DefaultKafkaVersion}. Consult the documentation to understand the process required to upgrade or downgrade the version.
  Version string `json:"version,omitempty"`

  // List of topics which are included for mirroring. This option allows any regular expression using Java-style regular expressions. Mirroring two topics named A and B is achieved by using the expression `A\|B`. Or, as a special case, you can mirror all topics using the regular expression `*`. You can also specify multiple regular expressions separated by commas.
  Whitelist string `json:"whitelist,omitempty"`
}

// Status The status of Kafka MirrorMaker.
type Status struct {

  // List of status conditions.
  Conditions []*ConditionsItems `json:"conditions,omitempty"`

  // Label selector for pods providing this resource.
  LabelSelector string `json:"labelSelector,omitempty"`

  // The generation of the CRD that was last reconciled by the operator.
  ObservedGeneration int `json:"observedGeneration,omitempty"`

  // The current number of pods being used to provide this resource.
  Replicas int `json:"replicas,omitempty"`
}

// SysctlsItems 
type SysctlsItems struct {
  Name string `json:"name,omitempty"`
  Value string `json:"value,omitempty"`
}

// Template Template to specify how Kafka MirrorMaker resources, `Deployments` and `Pods`, are generated.
type Template struct {

  // Template for Kafka MirrorMaker `Deployment`.
  Deployment *Deployment `json:"deployment,omitempty"`

  // Template for Kafka MirrorMaker container.
  MirrorMakerContainer *MirrorMakerContainer `json:"mirrorMakerContainer,omitempty"`

  // Template for Kafka MirrorMaker `Pods`.
  Pod *Pod `json:"pod,omitempty"`

  // Template for Kafka MirrorMaker `PodDisruptionBudget`.
  PodDisruptionBudget *PodDisruptionBudget `json:"podDisruptionBudget,omitempty"`

  // Template for the Kafka MirrorMaker service account.
  ServiceAccount *ServiceAccount `json:"serviceAccount,omitempty"`
}

// Tls TLS configuration for connecting MirrorMaker to the cluster.
type Tls struct {

  // Trusted certificates for TLS connection.
  TrustedCertificates []*TrustedCertificatesItems `json:"trustedCertificates,omitempty"`
}

// TlsTrustedCertificatesItems 
type TlsTrustedCertificatesItems struct {

  // The name of the file certificate in the Secret.
  Certificate string `json:"certificate"`

  // The name of the Secret containing the certificate.
  SecretName string `json:"secretName"`
}

// TolerationsItems 
type TolerationsItems struct {
  Effect string `json:"effect,omitempty"`
  Key string `json:"key,omitempty"`
  Operator string `json:"operator,omitempty"`
  TolerationSeconds int `json:"tolerationSeconds,omitempty"`
  Value string `json:"value,omitempty"`
}

// TopologySpreadConstraintsItems 
type TopologySpreadConstraintsItems struct {
  LabelSelector *LabelSelector `json:"labelSelector,omitempty"`
  MatchLabelKeys []string `json:"matchLabelKeys,omitempty"`
  MaxSkew int `json:"maxSkew,omitempty"`
  MinDomains int `json:"minDomains,omitempty"`
  NodeAffinityPolicy string `json:"nodeAffinityPolicy,omitempty"`
  NodeTaintsPolicy string `json:"nodeTaintsPolicy,omitempty"`
  TopologyKey string `json:"topologyKey,omitempty"`
  WhenUnsatisfiable string `json:"whenUnsatisfiable,omitempty"`
}

// Tracing The configuration of tracing in Kafka MirrorMaker.
type Tracing struct {

  // Type of the tracing used. Currently the only supported types are `jaeger` for OpenTracing (Jaeger) tracing and `opentelemetry` for OpenTelemetry tracing. The OpenTracing (Jaeger) tracing is deprecated.
  Type string `json:"type"`
}

// TrustedCertificatesItems 
type TrustedCertificatesItems struct {

  // The name of the file certificate in the Secret.
  Certificate string `json:"certificate"`

  // The name of the Secret containing the certificate.
  SecretName string `json:"secretName"`
}

// ValueFrom ConfigMap entry where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.
type ValueFrom struct {

  // Reference to the key in the ConfigMap containing the configuration.
  ConfigMapKeyRef *ConfigMapKeyRef `json:"configMapKeyRef,omitempty"`
}

// WindowsOptions 
type WindowsOptions struct {
  GmsaCredentialSpec string `json:"gmsaCredentialSpec,omitempty"`
  GmsaCredentialSpecName string `json:"gmsaCredentialSpecName,omitempty"`
  HostProcess bool `json:"hostProcess,omitempty"`
  RunAsUserName string `json:"runAsUserName,omitempty"`
}

// XX A map of -XX options to the JVM.
type XX struct {
}

func (strct *AccessToken) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AccessToken) UnmarshalJSON(b []byte) error {
    keyReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            keyReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if key (a required property) was received
    if !keyReceived {
        return errors.New("\"key\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *Authentication) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "accessToken" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"accessToken\": ")
	if tmp, err := json.Marshal(strct.AccessToken); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "accessTokenIsJwt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"accessTokenIsJwt\": ")
	if tmp, err := json.Marshal(strct.AccessTokenIsJwt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "audience" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"audience\": ")
	if tmp, err := json.Marshal(strct.Audience); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "certificateAndKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"certificateAndKey\": ")
	if tmp, err := json.Marshal(strct.CertificateAndKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "clientId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"clientId\": ")
	if tmp, err := json.Marshal(strct.ClientId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "clientSecret" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"clientSecret\": ")
	if tmp, err := json.Marshal(strct.ClientSecret); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "connectTimeoutSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"connectTimeoutSeconds\": ")
	if tmp, err := json.Marshal(strct.ConnectTimeoutSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "disableTlsHostnameVerification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"disableTlsHostnameVerification\": ")
	if tmp, err := json.Marshal(strct.DisableTlsHostnameVerification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "enableMetrics" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"enableMetrics\": ")
	if tmp, err := json.Marshal(strct.EnableMetrics); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "httpRetries" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"httpRetries\": ")
	if tmp, err := json.Marshal(strct.HttpRetries); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "httpRetryPauseMs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"httpRetryPauseMs\": ")
	if tmp, err := json.Marshal(strct.HttpRetryPauseMs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "maxTokenExpirySeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"maxTokenExpirySeconds\": ")
	if tmp, err := json.Marshal(strct.MaxTokenExpirySeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "passwordSecret" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"passwordSecret\": ")
	if tmp, err := json.Marshal(strct.PasswordSecret); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "readTimeoutSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"readTimeoutSeconds\": ")
	if tmp, err := json.Marshal(strct.ReadTimeoutSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "refreshToken" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"refreshToken\": ")
	if tmp, err := json.Marshal(strct.RefreshToken); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "scope" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"scope\": ")
	if tmp, err := json.Marshal(strct.Scope); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "tlsTrustedCertificates" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"tlsTrustedCertificates\": ")
	if tmp, err := json.Marshal(strct.TlsTrustedCertificates); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "tokenEndpointUri" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"tokenEndpointUri\": ")
	if tmp, err := json.Marshal(strct.TokenEndpointUri); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "username" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"username\": ")
	if tmp, err := json.Marshal(strct.Username); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Authentication) UnmarshalJSON(b []byte) error {
    typeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "accessToken":
            if err := json.Unmarshal([]byte(v), &strct.AccessToken); err != nil {
                return err
             }
        case "accessTokenIsJwt":
            if err := json.Unmarshal([]byte(v), &strct.AccessTokenIsJwt); err != nil {
                return err
             }
        case "audience":
            if err := json.Unmarshal([]byte(v), &strct.Audience); err != nil {
                return err
             }
        case "certificateAndKey":
            if err := json.Unmarshal([]byte(v), &strct.CertificateAndKey); err != nil {
                return err
             }
        case "clientId":
            if err := json.Unmarshal([]byte(v), &strct.ClientId); err != nil {
                return err
             }
        case "clientSecret":
            if err := json.Unmarshal([]byte(v), &strct.ClientSecret); err != nil {
                return err
             }
        case "connectTimeoutSeconds":
            if err := json.Unmarshal([]byte(v), &strct.ConnectTimeoutSeconds); err != nil {
                return err
             }
        case "disableTlsHostnameVerification":
            if err := json.Unmarshal([]byte(v), &strct.DisableTlsHostnameVerification); err != nil {
                return err
             }
        case "enableMetrics":
            if err := json.Unmarshal([]byte(v), &strct.EnableMetrics); err != nil {
                return err
             }
        case "httpRetries":
            if err := json.Unmarshal([]byte(v), &strct.HttpRetries); err != nil {
                return err
             }
        case "httpRetryPauseMs":
            if err := json.Unmarshal([]byte(v), &strct.HttpRetryPauseMs); err != nil {
                return err
             }
        case "maxTokenExpirySeconds":
            if err := json.Unmarshal([]byte(v), &strct.MaxTokenExpirySeconds); err != nil {
                return err
             }
        case "passwordSecret":
            if err := json.Unmarshal([]byte(v), &strct.PasswordSecret); err != nil {
                return err
             }
        case "readTimeoutSeconds":
            if err := json.Unmarshal([]byte(v), &strct.ReadTimeoutSeconds); err != nil {
                return err
             }
        case "refreshToken":
            if err := json.Unmarshal([]byte(v), &strct.RefreshToken); err != nil {
                return err
             }
        case "scope":
            if err := json.Unmarshal([]byte(v), &strct.Scope); err != nil {
                return err
             }
        case "tlsTrustedCertificates":
            if err := json.Unmarshal([]byte(v), &strct.TlsTrustedCertificates); err != nil {
                return err
             }
        case "tokenEndpointUri":
            if err := json.Unmarshal([]byte(v), &strct.TokenEndpointUri); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        case "username":
            if err := json.Unmarshal([]byte(v), &strct.Username); err != nil {
                return err
             }
        }
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    return nil
}

func (strct *CertificateAndKey) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Certificate" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "certificate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"certificate\": ")
	if tmp, err := json.Marshal(strct.Certificate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CertificateAndKey) UnmarshalJSON(b []byte) error {
    certificateReceived := false
    keyReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "certificate":
            if err := json.Unmarshal([]byte(v), &strct.Certificate); err != nil {
                return err
             }
            certificateReceived = true
        case "key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            keyReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if certificate (a required property) was received
    if !certificateReceived {
        return errors.New("\"certificate\" is required but was not present")
    }
    // check if key (a required property) was received
    if !keyReceived {
        return errors.New("\"key\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *ClientSecret) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ClientSecret) UnmarshalJSON(b []byte) error {
    keyReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            keyReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if key (a required property) was received
    if !keyReceived {
        return errors.New("\"key\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *Consumer) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "authentication" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"authentication\": ")
	if tmp, err := json.Marshal(strct.Authentication); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "BootstrapServers" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "bootstrapServers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"bootstrapServers\": ")
	if tmp, err := json.Marshal(strct.BootstrapServers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "config" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"config\": ")
	if tmp, err := json.Marshal(strct.Config); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "GroupId" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "groupId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"groupId\": ")
	if tmp, err := json.Marshal(strct.GroupId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "numStreams" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"numStreams\": ")
	if tmp, err := json.Marshal(strct.NumStreams); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "offsetCommitInterval" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"offsetCommitInterval\": ")
	if tmp, err := json.Marshal(strct.OffsetCommitInterval); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "tls" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"tls\": ")
	if tmp, err := json.Marshal(strct.Tls); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Consumer) UnmarshalJSON(b []byte) error {
    bootstrapServersReceived := false
    groupIdReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "authentication":
            if err := json.Unmarshal([]byte(v), &strct.Authentication); err != nil {
                return err
             }
        case "bootstrapServers":
            if err := json.Unmarshal([]byte(v), &strct.BootstrapServers); err != nil {
                return err
             }
            bootstrapServersReceived = true
        case "config":
            if err := json.Unmarshal([]byte(v), &strct.Config); err != nil {
                return err
             }
        case "groupId":
            if err := json.Unmarshal([]byte(v), &strct.GroupId); err != nil {
                return err
             }
            groupIdReceived = true
        case "numStreams":
            if err := json.Unmarshal([]byte(v), &strct.NumStreams); err != nil {
                return err
             }
        case "offsetCommitInterval":
            if err := json.Unmarshal([]byte(v), &strct.OffsetCommitInterval); err != nil {
                return err
             }
        case "tls":
            if err := json.Unmarshal([]byte(v), &strct.Tls); err != nil {
                return err
             }
        }
    }
    // check if bootstrapServers (a required property) was received
    if !bootstrapServersReceived {
        return errors.New("\"bootstrapServers\" is required but was not present")
    }
    // check if groupId (a required property) was received
    if !groupIdReceived {
        return errors.New("\"groupId\" is required but was not present")
    }
    return nil
}

func (strct *Logging) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "loggers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"loggers\": ")
	if tmp, err := json.Marshal(strct.Loggers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "valueFrom" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"valueFrom\": ")
	if tmp, err := json.Marshal(strct.ValueFrom); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Logging) UnmarshalJSON(b []byte) error {
    typeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "loggers":
            if err := json.Unmarshal([]byte(v), &strct.Loggers); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        case "valueFrom":
            if err := json.Unmarshal([]byte(v), &strct.ValueFrom); err != nil {
                return err
             }
        }
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    return nil
}

func (strct *MetricsConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ValueFrom" field is required
    if strct.ValueFrom == nil {
        return nil, errors.New("valueFrom is a required field")
    }
    // Marshal the "valueFrom" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"valueFrom\": ")
	if tmp, err := json.Marshal(strct.ValueFrom); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MetricsConfig) UnmarshalJSON(b []byte) error {
    typeReceived := false
    valueFromReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        case "valueFrom":
            if err := json.Unmarshal([]byte(v), &strct.ValueFrom); err != nil {
                return err
             }
            valueFromReceived = true
        }
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    // check if valueFrom (a required property) was received
    if !valueFromReceived {
        return errors.New("\"valueFrom\" is required but was not present")
    }
    return nil
}

func (strct *PasswordSecret) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Password" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "password" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"password\": ")
	if tmp, err := json.Marshal(strct.Password); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PasswordSecret) UnmarshalJSON(b []byte) error {
    passwordReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "password":
            if err := json.Unmarshal([]byte(v), &strct.Password); err != nil {
                return err
             }
            passwordReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if password (a required property) was received
    if !passwordReceived {
        return errors.New("\"password\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *Producer) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "abortOnSendFailure" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"abortOnSendFailure\": ")
	if tmp, err := json.Marshal(strct.AbortOnSendFailure); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "authentication" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"authentication\": ")
	if tmp, err := json.Marshal(strct.Authentication); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "BootstrapServers" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "bootstrapServers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"bootstrapServers\": ")
	if tmp, err := json.Marshal(strct.BootstrapServers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "config" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"config\": ")
	if tmp, err := json.Marshal(strct.Config); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "tls" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"tls\": ")
	if tmp, err := json.Marshal(strct.Tls); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Producer) UnmarshalJSON(b []byte) error {
    bootstrapServersReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "abortOnSendFailure":
            if err := json.Unmarshal([]byte(v), &strct.AbortOnSendFailure); err != nil {
                return err
             }
        case "authentication":
            if err := json.Unmarshal([]byte(v), &strct.Authentication); err != nil {
                return err
             }
        case "bootstrapServers":
            if err := json.Unmarshal([]byte(v), &strct.BootstrapServers); err != nil {
                return err
             }
            bootstrapServersReceived = true
        case "config":
            if err := json.Unmarshal([]byte(v), &strct.Config); err != nil {
                return err
             }
        case "tls":
            if err := json.Unmarshal([]byte(v), &strct.Tls); err != nil {
                return err
             }
        }
    }
    // check if bootstrapServers (a required property) was received
    if !bootstrapServersReceived {
        return errors.New("\"bootstrapServers\" is required but was not present")
    }
    return nil
}

func (strct *RefreshToken) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *RefreshToken) UnmarshalJSON(b []byte) error {
    keyReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            keyReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if key (a required property) was received
    if !keyReceived {
        return errors.New("\"key\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *Spec) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Consumer" field is required
    if strct.Consumer == nil {
        return nil, errors.New("consumer is a required field")
    }
    // Marshal the "consumer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"consumer\": ")
	if tmp, err := json.Marshal(strct.Consumer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "image" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"image\": ")
	if tmp, err := json.Marshal(strct.Image); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "include" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"include\": ")
	if tmp, err := json.Marshal(strct.Include); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "jvmOptions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"jvmOptions\": ")
	if tmp, err := json.Marshal(strct.JvmOptions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "livenessProbe" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"livenessProbe\": ")
	if tmp, err := json.Marshal(strct.LivenessProbe); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "logging" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"logging\": ")
	if tmp, err := json.Marshal(strct.Logging); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "metricsConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"metricsConfig\": ")
	if tmp, err := json.Marshal(strct.MetricsConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Producer" field is required
    if strct.Producer == nil {
        return nil, errors.New("producer is a required field")
    }
    // Marshal the "producer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"producer\": ")
	if tmp, err := json.Marshal(strct.Producer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "readinessProbe" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"readinessProbe\": ")
	if tmp, err := json.Marshal(strct.ReadinessProbe); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Replicas" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "replicas" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"replicas\": ")
	if tmp, err := json.Marshal(strct.Replicas); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "resources" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resources\": ")
	if tmp, err := json.Marshal(strct.Resources); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "template" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"template\": ")
	if tmp, err := json.Marshal(strct.Template); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "tracing" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"tracing\": ")
	if tmp, err := json.Marshal(strct.Tracing); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "whitelist" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"whitelist\": ")
	if tmp, err := json.Marshal(strct.Whitelist); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Spec) UnmarshalJSON(b []byte) error {
    consumerReceived := false
    producerReceived := false
    replicasReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "consumer":
            if err := json.Unmarshal([]byte(v), &strct.Consumer); err != nil {
                return err
             }
            consumerReceived = true
        case "image":
            if err := json.Unmarshal([]byte(v), &strct.Image); err != nil {
                return err
             }
        case "include":
            if err := json.Unmarshal([]byte(v), &strct.Include); err != nil {
                return err
             }
        case "jvmOptions":
            if err := json.Unmarshal([]byte(v), &strct.JvmOptions); err != nil {
                return err
             }
        case "livenessProbe":
            if err := json.Unmarshal([]byte(v), &strct.LivenessProbe); err != nil {
                return err
             }
        case "logging":
            if err := json.Unmarshal([]byte(v), &strct.Logging); err != nil {
                return err
             }
        case "metricsConfig":
            if err := json.Unmarshal([]byte(v), &strct.MetricsConfig); err != nil {
                return err
             }
        case "producer":
            if err := json.Unmarshal([]byte(v), &strct.Producer); err != nil {
                return err
             }
            producerReceived = true
        case "readinessProbe":
            if err := json.Unmarshal([]byte(v), &strct.ReadinessProbe); err != nil {
                return err
             }
        case "replicas":
            if err := json.Unmarshal([]byte(v), &strct.Replicas); err != nil {
                return err
             }
            replicasReceived = true
        case "resources":
            if err := json.Unmarshal([]byte(v), &strct.Resources); err != nil {
                return err
             }
        case "template":
            if err := json.Unmarshal([]byte(v), &strct.Template); err != nil {
                return err
             }
        case "tracing":
            if err := json.Unmarshal([]byte(v), &strct.Tracing); err != nil {
                return err
             }
        case "version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
        case "whitelist":
            if err := json.Unmarshal([]byte(v), &strct.Whitelist); err != nil {
                return err
             }
        }
    }
    // check if consumer (a required property) was received
    if !consumerReceived {
        return errors.New("\"consumer\" is required but was not present")
    }
    // check if producer (a required property) was received
    if !producerReceived {
        return errors.New("\"producer\" is required but was not present")
    }
    // check if replicas (a required property) was received
    if !replicasReceived {
        return errors.New("\"replicas\" is required but was not present")
    }
    return nil
}

func (strct *TlsTrustedCertificatesItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Certificate" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "certificate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"certificate\": ")
	if tmp, err := json.Marshal(strct.Certificate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TlsTrustedCertificatesItems) UnmarshalJSON(b []byte) error {
    certificateReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "certificate":
            if err := json.Unmarshal([]byte(v), &strct.Certificate); err != nil {
                return err
             }
            certificateReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if certificate (a required property) was received
    if !certificateReceived {
        return errors.New("\"certificate\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *Tracing) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tracing) UnmarshalJSON(b []byte) error {
    typeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        }
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    return nil
}

func (strct *TrustedCertificatesItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Certificate" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "certificate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"certificate\": ")
	if tmp, err := json.Marshal(strct.Certificate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TrustedCertificatesItems) UnmarshalJSON(b []byte) error {
    certificateReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "certificate":
            if err := json.Unmarshal([]byte(v), &strct.Certificate); err != nil {
                return err
             }
            certificateReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if certificate (a required property) was received
    if !certificateReceived {
        return errors.New("\"certificate\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}
