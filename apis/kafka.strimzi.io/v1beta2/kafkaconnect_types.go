// Code generated by schema-generate. DO NOT EDIT.

package v1beta2

import (
    "bytes"
    "encoding/json"
    "errors"
)

// AccessToken Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
type AccessToken struct {

  // The key under which the secret value is stored in the Kubernetes Secret.
  Key string `json:"key"`

  // The name of the Kubernetes Secret containing the secret value.
  SecretName string `json:"secretName"`
}

// Affinity The pod's affinity rules.
type Affinity struct {
  NodeAffinity *NodeAffinity `json:"nodeAffinity,omitempty"`
  PodAffinity *PodAffinity `json:"podAffinity,omitempty"`
  PodAntiAffinity *PodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

// Annotations Annotations added to the Kubernetes resource.
type Annotations struct {
}

// ApiService Template for Kafka Connect API `Service`.
type ApiService struct {

  // Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6`. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting.
  IpFamilies []string `json:"ipFamilies,omitempty"`

  // Specifies the IP Family Policy used by the service. Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type.
  IpFamilyPolicy string `json:"ipFamilyPolicy,omitempty"`

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`
}

// ArtifactsItems 
type ArtifactsItems struct {

  // Maven artifact id. Applicable to the `maven` artifact type only.
  Artifact string `json:"artifact,omitempty"`

  // Name under which the artifact will be stored.
  FileName string `json:"fileName,omitempty"`

  // Maven group id. Applicable to the `maven` artifact type only.
  Group string `json:"group,omitempty"`

  // By default, connections using TLS are verified to check they are secure. The server certificate used must be valid, trusted, and contain the server name. By setting this option to `true`, all TLS verification is disabled and the artifact will be downloaded, even when the server is considered insecure.
  Insecure bool `json:"insecure,omitempty"`

  // Maven repository to download the artifact from. Applicable to the `maven` artifact type only.
  Repository string `json:"repository,omitempty"`

  // SHA512 checksum of the artifact. Optional. If specified, the checksum will be verified while building the new container. If not specified, the downloaded artifact will not be verified. Not applicable to the `maven` artifact type. 
  Sha512sum string `json:"sha512sum,omitempty"`

  // Artifact type. Currently, the supported artifact types are `tgz`, `jar`, `zip`, `other` and `maven`.
  Type string `json:"type"`

  // URL of the artifact which will be downloaded. Strimzi does not do any security scanning of the downloaded artifacts. For security reasons, you should first verify the artifacts manually and configure the checksum verification to make sure the same artifact is used in the automated build. Required for `jar`, `zip`, `tgz` and `other` artifacts. Not applicable to the `maven` artifact type.
  Url string `json:"url,omitempty"`

  // Maven version number. Applicable to the `maven` artifact type only.
  Version string `json:"version,omitempty"`
}

// Authentication Authentication configuration for Kafka Connect.
type Authentication struct {

  // Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
  AccessToken *AccessToken `json:"accessToken,omitempty"`

  // Configure whether access token should be treated as JWT. This should be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
  AccessTokenIsJwt bool `json:"accessTokenIsJwt,omitempty"`

  // OAuth audience to use when authenticating against the authorization server. Some authorization servers require the audience to be explicitly set. The possible values depend on how the authorization server is configured. By default, `audience` is not specified when performing the token endpoint request.
  Audience string `json:"audience,omitempty"`

  // Reference to the `Secret` which holds the certificate and private key pair.
  CertificateAndKey *CertificateAndKey `json:"certificateAndKey,omitempty"`

  // OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
  ClientId string `json:"clientId,omitempty"`

  // Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
  ClientSecret *ClientSecret `json:"clientSecret,omitempty"`

  // The connect timeout in seconds when connecting to authorization server. If not set, the effective connect timeout is 60 seconds.
  ConnectTimeoutSeconds int `json:"connectTimeoutSeconds,omitempty"`

  // Enable or disable TLS hostname verification. Default value is `false`.
  DisableTlsHostnameVerification bool `json:"disableTlsHostnameVerification,omitempty"`

  // Enable or disable OAuth metrics. Default value is `false`.
  EnableMetrics bool `json:"enableMetrics,omitempty"`

  // The maximum number of retries to attempt if an initial HTTP request fails. If not set, the default is to not attempt any retries.
  HttpRetries int `json:"httpRetries,omitempty"`

  // The pause to take before retrying a failed HTTP request. If not set, the default is to not pause at all but to immediately repeat a request.
  HttpRetryPauseMs int `json:"httpRetryPauseMs,omitempty"`

  // Set or limit time-to-live of the access tokens to the specified number of seconds. This should be set if the authorization server returns opaque tokens.
  MaxTokenExpirySeconds int `json:"maxTokenExpirySeconds,omitempty"`

  // Reference to the `Secret` which holds the password.
  PasswordSecret *PasswordSecret `json:"passwordSecret,omitempty"`

  // The read timeout in seconds when connecting to authorization server. If not set, the effective read timeout is 60 seconds.
  ReadTimeoutSeconds int `json:"readTimeoutSeconds,omitempty"`

  // Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
  RefreshToken *RefreshToken `json:"refreshToken,omitempty"`

  // OAuth scope to use when authenticating against the authorization server. Some authorization servers require this to be set. The possible values depend on how authorization server is configured. By default `scope` is not specified when doing the token endpoint request.
  Scope string `json:"scope,omitempty"`

  // Trusted certificates for TLS connection to the OAuth server.
  TlsTrustedCertificates []*TlsTrustedCertificatesItems `json:"tlsTrustedCertificates,omitempty"`

  // Authorization server token endpoint URI.
  TokenEndpointUri string `json:"tokenEndpointUri,omitempty"`

  // Authentication type. Currently the supported types are `tls`, `scram-sha-256`, `scram-sha-512`, `plain`, and 'oauth'. `scram-sha-256` and `scram-sha-512` types use SASL SCRAM-SHA-256 and SASL SCRAM-SHA-512 Authentication, respectively. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
  Type string `json:"type"`

  // Username used for the authentication.
  Username string `json:"username,omitempty"`
}

// Build Configures how the Connect container image should be built. Optional.
type Build struct {

  // Configures where should the newly built image be stored. Required.
  Output *Output `json:"output"`

  // List of connector plugins which should be added to the Kafka Connect. Required.
  Plugins []*PluginsItems `json:"plugins"`

  // CPU and memory resources to reserve for the build.
  Resources *Resources `json:"resources,omitempty"`
}

// BuildConfig Template for the Kafka Connect BuildConfig used to build new container images. The BuildConfig is used only on OpenShift.
type BuildConfig struct {

  // Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
  Metadata *Metadata `json:"metadata,omitempty"`

  // Container Registry Secret with the credentials for pulling the base image.
  PullSecret string `json:"pullSecret,omitempty"`
}

// BuildContainer Template for the Kafka Connect Build container. The build container is used only on Kubernetes.
type BuildContainer struct {

  // Environment variables which should be applied to the container.
  Env []*EnvItems `json:"env,omitempty"`

  // Security context for the container.
  SecurityContext *SecurityContext `json:"securityContext,omitempty"`
}

// BuildPod Template for Kafka Connect Build `Pods`. The build pod is used only on Kubernetes.
type BuildPod struct {

  // The pod's affinity rules.
  Affinity *Affinity `json:"affinity,omitempty"`

  // Indicates whether information about services should be injected into Pod's environment variables.
  EnableServiceLinks bool `json:"enableServiceLinks,omitempty"`

  // The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.
  HostAliases []*HostAliasesItems `json:"hostAliases,omitempty"`

  // List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
  ImagePullSecrets []*ImagePullSecretsItems `json:"imagePullSecrets,omitempty"`

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`

  // The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.
  PriorityClassName string `json:"priorityClassName,omitempty"`

  // The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
  SchedulerName string `json:"schedulerName,omitempty"`

  // Configures pod-level security attributes and common container settings.
  SecurityContext *SecurityContext `json:"securityContext,omitempty"`

  // The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
  TerminationGracePeriodSeconds int `json:"terminationGracePeriodSeconds,omitempty"`

  // Defines the total amount (for example `1Gi`) of local storage required for temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
  TmpDirSizeLimit string `json:"tmpDirSizeLimit,omitempty"`

  // The pod's tolerations.
  Tolerations []*TolerationsItems `json:"tolerations,omitempty"`

  // The pod's topology spread constraints.
  TopologySpreadConstraints []*TopologySpreadConstraintsItems `json:"topologySpreadConstraints,omitempty"`
}

// BuildServiceAccount Template for the Kafka Connect Build service account.
type BuildServiceAccount struct {

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`
}

// Capabilities 
type Capabilities struct {
  Add []string `json:"add,omitempty"`
  Drop []string `json:"drop,omitempty"`
}

// CertificateAndKey Reference to the `Secret` which holds the certificate and private key pair.
type CertificateAndKey struct {

  // The name of the file certificate in the Secret.
  Certificate string `json:"certificate"`

  // The name of the private key in the Secret.
  Key string `json:"key"`

  // The name of the Secret containing the certificate.
  SecretName string `json:"secretName"`
}

// ClaimsItems 
type ClaimsItems struct {
  Name string `json:"name,omitempty"`
}

// ClientSecret Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
type ClientSecret struct {

  // The key under which the secret value is stored in the Kubernetes Secret.
  Key string `json:"key"`

  // The name of the Kubernetes Secret containing the secret value.
  SecretName string `json:"secretName"`
}

// ClusterRoleBinding Template for the Kafka Connect ClusterRoleBinding.
type ClusterRoleBinding struct {

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`
}

// ConditionsItems 
type ConditionsItems struct {

  // Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
  LastTransitionTime string `json:"lastTransitionTime,omitempty"`

  // Human-readable message indicating details about the condition's last transition.
  Message string `json:"message,omitempty"`

  // The reason for the condition's last transition (a single word in CamelCase).
  Reason string `json:"reason,omitempty"`

  // The status of the condition, either True, False or Unknown.
  Status string `json:"status,omitempty"`

  // The unique identifier of a condition, used to distinguish between other conditions in the resource.
  Type string `json:"type,omitempty"`
}

// Config The Kafka Connect configuration. Properties with the following prefixes cannot be set: ssl., sasl., security., listeners, plugin.path, rest., bootstrap.servers, consumer.interceptor.classes, producer.interceptor.classes (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
type Config struct {
}

// ConfigMap Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be specified.
type ConfigMap struct {
  DefaultMode int `json:"defaultMode,omitempty"`
  Items []*ItemsItems `json:"items,omitempty"`
  Name string `json:"name,omitempty"`
  Optional bool `json:"optional,omitempty"`
}

// ConfigMapKeyRef Reference to the key in the ConfigMap containing the configuration.
type ConfigMapKeyRef struct {
  Key string `json:"key,omitempty"`
  Name string `json:"name,omitempty"`
  Optional bool `json:"optional,omitempty"`
}

// ConnectContainer Template for the Kafka Connect container.
type ConnectContainer struct {

  // Environment variables which should be applied to the container.
  Env []*EnvItems `json:"env,omitempty"`

  // Security context for the container.
  SecurityContext *SecurityContext `json:"securityContext,omitempty"`
}

// ConnectorPluginsItems 
type ConnectorPluginsItems struct {

  // The class of the connector plugin.
  Class string `json:"class,omitempty"`

  // The type of the connector plugin. The available types are `sink` and `source`.
  Type string `json:"type,omitempty"`

  // The version of the connector plugin.
  Version string `json:"version,omitempty"`
}

// Deployment Template for Kafka Connect `Deployment`.
type Deployment struct {

  // Pod replacement strategy for deployment configuration changes. Valid values are `RollingUpdate` and `Recreate`. Defaults to `RollingUpdate`.
  DeploymentStrategy string `json:"deploymentStrategy,omitempty"`

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`
}

// EnvItems 
type EnvItems struct {

  // Name of the environment variable which will be passed to the Kafka Connect pods. The name of the environment variable cannot start with `KAFKA_` or `STRIMZI_`.
  Name string `json:"name"`

  // Value of the environment variable which will be passed to the Kafka Connect pods. It can be passed either as a reference to Secret or ConfigMap field. The field has to specify exactly one Secret or ConfigMap.
  ValueFrom *ValueFrom `json:"valueFrom"`
}

// ExternalConfiguration Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to configure connectors.
type ExternalConfiguration struct {

  // Makes data from a Secret or ConfigMap available in the Kafka Connect pods as environment variables.
  Env []*EnvItems `json:"env,omitempty"`

  // Makes data from a Secret or ConfigMap available in the Kafka Connect pods as volumes.
  Volumes []*VolumesItems `json:"volumes,omitempty"`
}

// HeadlessService Template for Kafka Connect headless `Service`.
type HeadlessService struct {

  // Specifies the IP Families used by the service. Available options are `IPv4` and `IPv6`. If unspecified, Kubernetes will choose the default value based on the `ipFamilyPolicy` setting.
  IpFamilies []string `json:"ipFamilies,omitempty"`

  // Specifies the IP Family Policy used by the service. Available options are `SingleStack`, `PreferDualStack` and `RequireDualStack`. `SingleStack` is for a single IP family. `PreferDualStack` is for two IP families on dual-stack configured clusters or a single IP family on single-stack clusters. `RequireDualStack` fails unless there are two IP families on dual-stack configured clusters. If unspecified, Kubernetes will choose the default value based on the service type.
  IpFamilyPolicy string `json:"ipFamilyPolicy,omitempty"`

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`
}

// HostAliasesItems 
type HostAliasesItems struct {
  Hostnames []string `json:"hostnames,omitempty"`
  Ip string `json:"ip,omitempty"`
}

// ImagePullSecretsItems 
type ImagePullSecretsItems struct {
  Name string `json:"name,omitempty"`
}

// InitContainer Template for the Kafka init container.
type InitContainer struct {

  // Environment variables which should be applied to the container.
  Env []*EnvItems `json:"env,omitempty"`

  // Security context for the container.
  SecurityContext *SecurityContext `json:"securityContext,omitempty"`
}

// ItemsItems 
type ItemsItems struct {
  Key string `json:"key,omitempty"`
  Mode int `json:"mode,omitempty"`
  Path string `json:"path,omitempty"`
}

// JavaSystemPropertiesItems 
type JavaSystemPropertiesItems struct {

  // The system property name.
  Name string `json:"name,omitempty"`

  // The system property value.
  Value string `json:"value,omitempty"`
}

// JmxOptions JMX Options.
type JmxOptions struct {

  // Authentication configuration for connecting to the JMX port.
  Authentication *Authentication `json:"authentication,omitempty"`
}

// JmxSecret Template for Secret of the Kafka Connect Cluster JMX authentication.
type JmxSecret struct {

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`
}

// JvmOptions JVM Options for pods.
type JvmOptions struct {

  // Specifies whether the Garbage Collection logging is enabled. The default is false.
  GcLoggingEnabled bool `json:"gcLoggingEnabled,omitempty"`

  // A map of additional system properties which will be passed using the `-D` option to the JVM.
  JavaSystemProperties []*JavaSystemPropertiesItems `json:"javaSystemProperties,omitempty"`

  // A map of -XX options to the JVM.
  XX *XX `json:"-XX,omitempty"`

  // -Xms option to to the JVM.
  Xms string `json:"-Xms,omitempty"`

  // -Xmx option to to the JVM.
  Xmx string `json:"-Xmx,omitempty"`
}

// KafkaConnect 
type KafkaConnect struct {

  // The specification of the Kafka Connect cluster.
  Spec *Spec `json:"spec,omitempty"`

  // The status of the Kafka Connect cluster.
  Status *Status `json:"status,omitempty"`
}

// LabelSelector 
type LabelSelector struct {
  MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`
  MatchLabels *MatchLabels `json:"matchLabels,omitempty"`
}

// Labels Labels added to the Kubernetes resource.
type Labels struct {
}

// Limits 
type Limits struct {
}

// LivenessProbe Pod liveness checking.
type LivenessProbe struct {

  // Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  FailureThreshold int `json:"failureThreshold,omitempty"`

  // The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.
  InitialDelaySeconds int `json:"initialDelaySeconds,omitempty"`

  // How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  PeriodSeconds int `json:"periodSeconds,omitempty"`

  // Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
  SuccessThreshold int `json:"successThreshold,omitempty"`

  // The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.
  TimeoutSeconds int `json:"timeoutSeconds,omitempty"`
}

// Loggers A Map from logger name to logger level.
type Loggers struct {
}

// Logging Logging configuration for Kafka Connect.
type Logging struct {

  // A Map from logger name to logger level.
  Loggers *Loggers `json:"loggers,omitempty"`

  // Logging type, must be either 'inline' or 'external'.
  Type string `json:"type"`

  // `ConfigMap` entry where the logging configuration is stored. 
  ValueFrom *ValueFrom `json:"valueFrom,omitempty"`
}

// MatchExpressionsItems 
type MatchExpressionsItems struct {
  Key string `json:"key,omitempty"`
  Operator string `json:"operator,omitempty"`
  Values []string `json:"values,omitempty"`
}

// MatchFieldsItems 
type MatchFieldsItems struct {
  Key string `json:"key,omitempty"`
  Operator string `json:"operator,omitempty"`
  Values []string `json:"values,omitempty"`
}

// MatchLabels 
type MatchLabels struct {
}

// Metadata Metadata applied to the resource.
type Metadata struct {

  // Annotations added to the Kubernetes resource.
  Annotations *Annotations `json:"annotations,omitempty"`

  // Labels added to the Kubernetes resource.
  Labels *Labels `json:"labels,omitempty"`
}

// MetricsConfig Metrics configuration.
type MetricsConfig struct {

  // Metrics type. Only 'jmxPrometheusExporter' supported currently.
  Type string `json:"type"`

  // ConfigMap entry where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.
  ValueFrom *ValueFrom `json:"valueFrom"`
}

// NamespaceSelector 
type NamespaceSelector struct {
  MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`
  MatchLabels *MatchLabels `json:"matchLabels,omitempty"`
}

// NodeAffinity 
type NodeAffinity struct {
  PreferredDuringSchedulingIgnoredDuringExecution []*PreferredDuringSchedulingIgnoredDuringExecutionItems `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
  RequiredDuringSchedulingIgnoredDuringExecution *RequiredDuringSchedulingIgnoredDuringExecution `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// NodeSelectorTermsItems 
type NodeSelectorTermsItems struct {
  MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`
  MatchFields []*MatchFieldsItems `json:"matchFields,omitempty"`
}

// Output Configures where should the newly built image be stored. Required.
type Output struct {

  // Configures additional options which will be passed to the Kaniko executor when building the new Connect image. Allowed options are: --customPlatform, --insecure, --insecure-pull, --insecure-registry, --log-format, --log-timestamp, --registry-mirror, --reproducible, --single-snapshot, --skip-tls-verify, --skip-tls-verify-pull, --skip-tls-verify-registry, --verbosity, --snapshotMode, --use-new-run. These options will be used only on Kubernetes where the Kaniko executor is used. They will be ignored on OpenShift. The options are described in the link:https://github.com/GoogleContainerTools/kaniko[Kaniko GitHub repository^]. Changing this field does not trigger new build of the Kafka Connect image.
  AdditionalKanikoOptions []string `json:"additionalKanikoOptions,omitempty"`

  // The name of the image which will be built. Required.
  Image string `json:"image"`

  // Container Registry Secret with the credentials for pushing the newly built image.
  PushSecret string `json:"pushSecret,omitempty"`

  // Output type. Must be either `docker` for pushing the newly build image to Docker compatible registry or `imagestream` for pushing the image to OpenShift ImageStream. Required.
  Type string `json:"type"`
}

// PasswordSecret Reference to the `Secret` which holds the password.
type PasswordSecret struct {

  // The name of the key in the Secret under which the password is stored.
  Password string `json:"password"`

  // The name of the Secret containing the password.
  SecretName string `json:"secretName"`
}

// PluginsItems 
type PluginsItems struct {

  // List of artifacts which belong to this connector plugin. Required.
  Artifacts []*ArtifactsItems `json:"artifacts"`

  // The unique name of the connector plugin. Will be used to generate the path where the connector artifacts will be stored. The name has to be unique within the KafkaConnect resource. The name has to follow the following pattern: `^[a-z][-_a-z0-9]*[a-z]$`. Required.
  Name string `json:"name"`
}

// Pod Template for Kafka Connect `Pods`.
type Pod struct {

  // The pod's affinity rules.
  Affinity *Affinity `json:"affinity,omitempty"`

  // Indicates whether information about services should be injected into Pod's environment variables.
  EnableServiceLinks bool `json:"enableServiceLinks,omitempty"`

  // The pod's HostAliases. HostAliases is an optional list of hosts and IPs that will be injected into the Pod's hosts file if specified.
  HostAliases []*HostAliasesItems `json:"hostAliases,omitempty"`

  // List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
  ImagePullSecrets []*ImagePullSecretsItems `json:"imagePullSecrets,omitempty"`

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`

  // The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.
  PriorityClassName string `json:"priorityClassName,omitempty"`

  // The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
  SchedulerName string `json:"schedulerName,omitempty"`

  // Configures pod-level security attributes and common container settings.
  SecurityContext *SecurityContext `json:"securityContext,omitempty"`

  // The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
  TerminationGracePeriodSeconds int `json:"terminationGracePeriodSeconds,omitempty"`

  // Defines the total amount (for example `1Gi`) of local storage required for temporary EmptyDir volume (`/tmp`). Default value is `5Mi`.
  TmpDirSizeLimit string `json:"tmpDirSizeLimit,omitempty"`

  // The pod's tolerations.
  Tolerations []*TolerationsItems `json:"tolerations,omitempty"`

  // The pod's topology spread constraints.
  TopologySpreadConstraints []*TopologySpreadConstraintsItems `json:"topologySpreadConstraints,omitempty"`
}

// PodAffinity 
type PodAffinity struct {
  PreferredDuringSchedulingIgnoredDuringExecution []*PreferredDuringSchedulingIgnoredDuringExecutionItems `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
  RequiredDuringSchedulingIgnoredDuringExecution []*RequiredDuringSchedulingIgnoredDuringExecutionItems `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// PodAffinityTerm 
type PodAffinityTerm struct {
  LabelSelector *LabelSelector `json:"labelSelector,omitempty"`
  NamespaceSelector *NamespaceSelector `json:"namespaceSelector,omitempty"`
  Namespaces []string `json:"namespaces,omitempty"`
  TopologyKey string `json:"topologyKey,omitempty"`
}

// PodAntiAffinity 
type PodAntiAffinity struct {
  PreferredDuringSchedulingIgnoredDuringExecution []*PreferredDuringSchedulingIgnoredDuringExecutionItems `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
  RequiredDuringSchedulingIgnoredDuringExecution []*RequiredDuringSchedulingIgnoredDuringExecutionItems `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

// PodDisruptionBudget Template for Kafka Connect `PodDisruptionBudget`.
type PodDisruptionBudget struct {

  // Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
  MaxUnavailable int `json:"maxUnavailable,omitempty"`

  // Metadata to apply to the `PodDisruptionBudgetTemplate` resource.
  Metadata *Metadata `json:"metadata,omitempty"`
}

// PodSet Template for Kafka Connect `StrimziPodSet` resource.
type PodSet struct {

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`
}

// Preference 
type Preference struct {
  MatchExpressions []*MatchExpressionsItems `json:"matchExpressions,omitempty"`
  MatchFields []*MatchFieldsItems `json:"matchFields,omitempty"`
}

// PreferredDuringSchedulingIgnoredDuringExecutionItems 
type PreferredDuringSchedulingIgnoredDuringExecutionItems struct {
  PodAffinityTerm *PodAffinityTerm `json:"podAffinityTerm,omitempty"`
  Weight int `json:"weight,omitempty"`
}

// Rack Configuration of the node label which will be used as the `client.rack` consumer configuration.
type Rack struct {

  // A key that matches labels assigned to the Kubernetes cluster nodes. The value of the label is used to set a broker's `broker.rack` config, and the `client.rack` config for Kafka Connect or MirrorMaker 2.
  TopologyKey string `json:"topologyKey"`
}

// ReadinessProbe Pod readiness checking.
type ReadinessProbe struct {

  // Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
  FailureThreshold int `json:"failureThreshold,omitempty"`

  // The initial delay before first the health is first checked. Default to 15 seconds. Minimum value is 0.
  InitialDelaySeconds int `json:"initialDelaySeconds,omitempty"`

  // How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
  PeriodSeconds int `json:"periodSeconds,omitempty"`

  // Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
  SuccessThreshold int `json:"successThreshold,omitempty"`

  // The timeout for each attempted health check. Default to 5 seconds. Minimum value is 1.
  TimeoutSeconds int `json:"timeoutSeconds,omitempty"`
}

// RefreshToken Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
type RefreshToken struct {

  // The key under which the secret value is stored in the Kubernetes Secret.
  Key string `json:"key"`

  // The name of the Kubernetes Secret containing the secret value.
  SecretName string `json:"secretName"`
}

// Requests 
type Requests struct {
}

// RequiredDuringSchedulingIgnoredDuringExecution 
type RequiredDuringSchedulingIgnoredDuringExecution struct {
  NodeSelectorTerms []*NodeSelectorTermsItems `json:"nodeSelectorTerms,omitempty"`
}

// RequiredDuringSchedulingIgnoredDuringExecutionItems 
type RequiredDuringSchedulingIgnoredDuringExecutionItems struct {
  LabelSelector *LabelSelector `json:"labelSelector,omitempty"`
  NamespaceSelector *NamespaceSelector `json:"namespaceSelector,omitempty"`
  Namespaces []string `json:"namespaces,omitempty"`
  TopologyKey string `json:"topologyKey,omitempty"`
}

// Resources CPU and memory resources to reserve for the build.
type Resources struct {
  Claims []*ClaimsItems `json:"claims,omitempty"`
  Limits *Limits `json:"limits,omitempty"`
  Requests *Requests `json:"requests,omitempty"`
}

// SeLinuxOptions 
type SeLinuxOptions struct {
  Level string `json:"level,omitempty"`
  Role string `json:"role,omitempty"`
  Type string `json:"type,omitempty"`
  User string `json:"user,omitempty"`
}

// SeccompProfile 
type SeccompProfile struct {
  LocalhostProfile string `json:"localhostProfile,omitempty"`
  Type string `json:"type,omitempty"`
}

// Secret Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be specified.
type Secret struct {
  DefaultMode int `json:"defaultMode,omitempty"`
  Items []*ItemsItems `json:"items,omitempty"`
  Optional bool `json:"optional,omitempty"`
  SecretName string `json:"secretName,omitempty"`
}

// SecretKeyRef Reference to a key in a Secret.
type SecretKeyRef struct {
  Key string `json:"key,omitempty"`
  Name string `json:"name,omitempty"`
  Optional bool `json:"optional,omitempty"`
}

// SecurityContext Security context for the container.
type SecurityContext struct {
  AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty"`
  Capabilities *Capabilities `json:"capabilities,omitempty"`
  Privileged bool `json:"privileged,omitempty"`
  ProcMount string `json:"procMount,omitempty"`
  ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty"`
  RunAsGroup int `json:"runAsGroup,omitempty"`
  RunAsNonRoot bool `json:"runAsNonRoot,omitempty"`
  RunAsUser int `json:"runAsUser,omitempty"`
  SeLinuxOptions *SeLinuxOptions `json:"seLinuxOptions,omitempty"`
  SeccompProfile *SeccompProfile `json:"seccompProfile,omitempty"`
  WindowsOptions *WindowsOptions `json:"windowsOptions,omitempty"`
}

// ServiceAccount Template for the Kafka Connect service account.
type ServiceAccount struct {

  // Metadata applied to the resource.
  Metadata *Metadata `json:"metadata,omitempty"`
}

// Spec The specification of the Kafka Connect cluster.
type Spec struct {

  // Authentication configuration for Kafka Connect.
  Authentication *Authentication `json:"authentication,omitempty"`

  // Bootstrap servers to connect to. This should be given as a comma separated list of _<hostname>_:_<port>_ pairs.
  BootstrapServers string `json:"bootstrapServers"`

  // Configures how the Connect container image should be built. Optional.
  Build *Build `json:"build,omitempty"`

  // The image of the init container used for initializing the `client.rack`.
  ClientRackInitImage string `json:"clientRackInitImage,omitempty"`

  // The Kafka Connect configuration. Properties with the following prefixes cannot be set: ssl., sasl., security., listeners, plugin.path, rest., bootstrap.servers, consumer.interceptor.classes, producer.interceptor.classes (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
  Config *Config `json:"config,omitempty"`

  // Pass data from Secrets or ConfigMaps to the Kafka Connect pods and use them to configure connectors.
  ExternalConfiguration *ExternalConfiguration `json:"externalConfiguration,omitempty"`

  // The docker image for the pods.
  Image string `json:"image,omitempty"`

  // JMX Options.
  JmxOptions *JmxOptions `json:"jmxOptions,omitempty"`

  // JVM Options for pods.
  JvmOptions *JvmOptions `json:"jvmOptions,omitempty"`

  // Pod liveness checking.
  LivenessProbe *LivenessProbe `json:"livenessProbe,omitempty"`

  // Logging configuration for Kafka Connect.
  Logging *Logging `json:"logging,omitempty"`

  // Metrics configuration.
  MetricsConfig *MetricsConfig `json:"metricsConfig,omitempty"`

  // Configuration of the node label which will be used as the `client.rack` consumer configuration.
  Rack *Rack `json:"rack,omitempty"`

  // Pod readiness checking.
  ReadinessProbe *ReadinessProbe `json:"readinessProbe,omitempty"`

  // The number of pods in the Kafka Connect group. Defaults to `3`.
  Replicas int `json:"replicas,omitempty"`

  // The maximum limits for CPU and memory resources and the requested initial resources.
  Resources *Resources `json:"resources,omitempty"`

  // Template for Kafka Connect and Kafka Mirror Maker 2 resources. The template allows users to specify how the `Deployment`, `Pods` and `Service` are generated.
  Template *Template `json:"template,omitempty"`

  // TLS configuration.
  Tls *Tls `json:"tls,omitempty"`

  // The configuration of tracing in Kafka Connect.
  Tracing *Tracing `json:"tracing,omitempty"`

  // The Kafka Connect version. Defaults to {DefaultKafkaVersion}. Consult the user documentation to understand the process required to upgrade or downgrade the version.
  Version string `json:"version,omitempty"`
}

// Status The status of the Kafka Connect cluster.
type Status struct {

  // List of status conditions.
  Conditions []*ConditionsItems `json:"conditions,omitempty"`

  // The list of connector plugins available in this Kafka Connect deployment.
  ConnectorPlugins []*ConnectorPluginsItems `json:"connectorPlugins,omitempty"`

  // Label selector for pods providing this resource.
  LabelSelector string `json:"labelSelector,omitempty"`

  // The generation of the CRD that was last reconciled by the operator.
  ObservedGeneration int `json:"observedGeneration,omitempty"`

  // The current number of pods being used to provide this resource.
  Replicas int `json:"replicas,omitempty"`

  // The URL of the REST API endpoint for managing and monitoring Kafka Connect connectors.
  Url string `json:"url,omitempty"`
}

// SysctlsItems 
type SysctlsItems struct {
  Name string `json:"name,omitempty"`
  Value string `json:"value,omitempty"`
}

// Template Template for Kafka Connect and Kafka Mirror Maker 2 resources. The template allows users to specify how the `Deployment`, `Pods` and `Service` are generated.
type Template struct {

  // Template for Kafka Connect API `Service`.
  ApiService *ApiService `json:"apiService,omitempty"`

  // Template for the Kafka Connect BuildConfig used to build new container images. The BuildConfig is used only on OpenShift.
  BuildConfig *BuildConfig `json:"buildConfig,omitempty"`

  // Template for the Kafka Connect Build container. The build container is used only on Kubernetes.
  BuildContainer *BuildContainer `json:"buildContainer,omitempty"`

  // Template for Kafka Connect Build `Pods`. The build pod is used only on Kubernetes.
  BuildPod *BuildPod `json:"buildPod,omitempty"`

  // Template for the Kafka Connect Build service account.
  BuildServiceAccount *BuildServiceAccount `json:"buildServiceAccount,omitempty"`

  // Template for the Kafka Connect ClusterRoleBinding.
  ClusterRoleBinding *ClusterRoleBinding `json:"clusterRoleBinding,omitempty"`

  // Template for the Kafka Connect container.
  ConnectContainer *ConnectContainer `json:"connectContainer,omitempty"`

  // Template for Kafka Connect `Deployment`.
  Deployment *Deployment `json:"deployment,omitempty"`

  // Template for Kafka Connect headless `Service`.
  HeadlessService *HeadlessService `json:"headlessService,omitempty"`

  // Template for the Kafka init container.
  InitContainer *InitContainer `json:"initContainer,omitempty"`

  // Template for Secret of the Kafka Connect Cluster JMX authentication.
  JmxSecret *JmxSecret `json:"jmxSecret,omitempty"`

  // Template for Kafka Connect `Pods`.
  Pod *Pod `json:"pod,omitempty"`

  // Template for Kafka Connect `PodDisruptionBudget`.
  PodDisruptionBudget *PodDisruptionBudget `json:"podDisruptionBudget,omitempty"`

  // Template for Kafka Connect `StrimziPodSet` resource.
  PodSet *PodSet `json:"podSet,omitempty"`

  // Template for the Kafka Connect service account.
  ServiceAccount *ServiceAccount `json:"serviceAccount,omitempty"`
}

// Tls TLS configuration.
type Tls struct {

  // Trusted certificates for TLS connection.
  TrustedCertificates []*TrustedCertificatesItems `json:"trustedCertificates,omitempty"`
}

// TlsTrustedCertificatesItems 
type TlsTrustedCertificatesItems struct {

  // The name of the file certificate in the Secret.
  Certificate string `json:"certificate"`

  // The name of the Secret containing the certificate.
  SecretName string `json:"secretName"`
}

// TolerationsItems 
type TolerationsItems struct {
  Effect string `json:"effect,omitempty"`
  Key string `json:"key,omitempty"`
  Operator string `json:"operator,omitempty"`
  TolerationSeconds int `json:"tolerationSeconds,omitempty"`
  Value string `json:"value,omitempty"`
}

// TopologySpreadConstraintsItems 
type TopologySpreadConstraintsItems struct {
  LabelSelector *LabelSelector `json:"labelSelector,omitempty"`
  MatchLabelKeys []string `json:"matchLabelKeys,omitempty"`
  MaxSkew int `json:"maxSkew,omitempty"`
  MinDomains int `json:"minDomains,omitempty"`
  NodeAffinityPolicy string `json:"nodeAffinityPolicy,omitempty"`
  NodeTaintsPolicy string `json:"nodeTaintsPolicy,omitempty"`
  TopologyKey string `json:"topologyKey,omitempty"`
  WhenUnsatisfiable string `json:"whenUnsatisfiable,omitempty"`
}

// Tracing The configuration of tracing in Kafka Connect.
type Tracing struct {

  // Type of the tracing used. Currently the only supported types are `jaeger` for OpenTracing (Jaeger) tracing and `opentelemetry` for OpenTelemetry tracing. The OpenTracing (Jaeger) tracing is deprecated.
  Type string `json:"type"`
}

// TrustedCertificatesItems 
type TrustedCertificatesItems struct {

  // The name of the file certificate in the Secret.
  Certificate string `json:"certificate"`

  // The name of the Secret containing the certificate.
  SecretName string `json:"secretName"`
}

// ValueFrom ConfigMap entry where the Prometheus JMX Exporter configuration is stored. For details of the structure of this configuration, see the {JMXExporter}.
type ValueFrom struct {

  // Reference to the key in the ConfigMap containing the configuration.
  ConfigMapKeyRef *ConfigMapKeyRef `json:"configMapKeyRef,omitempty"`
}

// VolumesItems 
type VolumesItems struct {

  // Reference to a key in a ConfigMap. Exactly one Secret or ConfigMap has to be specified.
  ConfigMap *ConfigMap `json:"configMap,omitempty"`

  // Name of the volume which will be added to the Kafka Connect pods.
  Name string `json:"name"`

  // Reference to a key in a Secret. Exactly one Secret or ConfigMap has to be specified.
  Secret *Secret `json:"secret,omitempty"`
}

// WindowsOptions 
type WindowsOptions struct {
  GmsaCredentialSpec string `json:"gmsaCredentialSpec,omitempty"`
  GmsaCredentialSpecName string `json:"gmsaCredentialSpecName,omitempty"`
  HostProcess bool `json:"hostProcess,omitempty"`
  RunAsUserName string `json:"runAsUserName,omitempty"`
}

// XX A map of -XX options to the JVM.
type XX struct {
}

func (strct *AccessToken) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AccessToken) UnmarshalJSON(b []byte) error {
    keyReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            keyReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if key (a required property) was received
    if !keyReceived {
        return errors.New("\"key\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *ArtifactsItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "artifact" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"artifact\": ")
	if tmp, err := json.Marshal(strct.Artifact); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "fileName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"fileName\": ")
	if tmp, err := json.Marshal(strct.FileName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "group" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"group\": ")
	if tmp, err := json.Marshal(strct.Group); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "insecure" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"insecure\": ")
	if tmp, err := json.Marshal(strct.Insecure); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "repository" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"repository\": ")
	if tmp, err := json.Marshal(strct.Repository); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "sha512sum" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"sha512sum\": ")
	if tmp, err := json.Marshal(strct.Sha512sum); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ArtifactsItems) UnmarshalJSON(b []byte) error {
    typeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "artifact":
            if err := json.Unmarshal([]byte(v), &strct.Artifact); err != nil {
                return err
             }
        case "fileName":
            if err := json.Unmarshal([]byte(v), &strct.FileName); err != nil {
                return err
             }
        case "group":
            if err := json.Unmarshal([]byte(v), &strct.Group); err != nil {
                return err
             }
        case "insecure":
            if err := json.Unmarshal([]byte(v), &strct.Insecure); err != nil {
                return err
             }
        case "repository":
            if err := json.Unmarshal([]byte(v), &strct.Repository); err != nil {
                return err
             }
        case "sha512sum":
            if err := json.Unmarshal([]byte(v), &strct.Sha512sum); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        case "url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
        case "version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
        }
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    return nil
}

func (strct *Authentication) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "accessToken" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"accessToken\": ")
	if tmp, err := json.Marshal(strct.AccessToken); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "accessTokenIsJwt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"accessTokenIsJwt\": ")
	if tmp, err := json.Marshal(strct.AccessTokenIsJwt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "audience" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"audience\": ")
	if tmp, err := json.Marshal(strct.Audience); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "certificateAndKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"certificateAndKey\": ")
	if tmp, err := json.Marshal(strct.CertificateAndKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "clientId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"clientId\": ")
	if tmp, err := json.Marshal(strct.ClientId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "clientSecret" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"clientSecret\": ")
	if tmp, err := json.Marshal(strct.ClientSecret); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "connectTimeoutSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"connectTimeoutSeconds\": ")
	if tmp, err := json.Marshal(strct.ConnectTimeoutSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "disableTlsHostnameVerification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"disableTlsHostnameVerification\": ")
	if tmp, err := json.Marshal(strct.DisableTlsHostnameVerification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "enableMetrics" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"enableMetrics\": ")
	if tmp, err := json.Marshal(strct.EnableMetrics); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "httpRetries" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"httpRetries\": ")
	if tmp, err := json.Marshal(strct.HttpRetries); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "httpRetryPauseMs" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"httpRetryPauseMs\": ")
	if tmp, err := json.Marshal(strct.HttpRetryPauseMs); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "maxTokenExpirySeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"maxTokenExpirySeconds\": ")
	if tmp, err := json.Marshal(strct.MaxTokenExpirySeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "passwordSecret" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"passwordSecret\": ")
	if tmp, err := json.Marshal(strct.PasswordSecret); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "readTimeoutSeconds" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"readTimeoutSeconds\": ")
	if tmp, err := json.Marshal(strct.ReadTimeoutSeconds); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "refreshToken" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"refreshToken\": ")
	if tmp, err := json.Marshal(strct.RefreshToken); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "scope" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"scope\": ")
	if tmp, err := json.Marshal(strct.Scope); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "tlsTrustedCertificates" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"tlsTrustedCertificates\": ")
	if tmp, err := json.Marshal(strct.TlsTrustedCertificates); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "tokenEndpointUri" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"tokenEndpointUri\": ")
	if tmp, err := json.Marshal(strct.TokenEndpointUri); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "username" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"username\": ")
	if tmp, err := json.Marshal(strct.Username); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Authentication) UnmarshalJSON(b []byte) error {
    typeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "accessToken":
            if err := json.Unmarshal([]byte(v), &strct.AccessToken); err != nil {
                return err
             }
        case "accessTokenIsJwt":
            if err := json.Unmarshal([]byte(v), &strct.AccessTokenIsJwt); err != nil {
                return err
             }
        case "audience":
            if err := json.Unmarshal([]byte(v), &strct.Audience); err != nil {
                return err
             }
        case "certificateAndKey":
            if err := json.Unmarshal([]byte(v), &strct.CertificateAndKey); err != nil {
                return err
             }
        case "clientId":
            if err := json.Unmarshal([]byte(v), &strct.ClientId); err != nil {
                return err
             }
        case "clientSecret":
            if err := json.Unmarshal([]byte(v), &strct.ClientSecret); err != nil {
                return err
             }
        case "connectTimeoutSeconds":
            if err := json.Unmarshal([]byte(v), &strct.ConnectTimeoutSeconds); err != nil {
                return err
             }
        case "disableTlsHostnameVerification":
            if err := json.Unmarshal([]byte(v), &strct.DisableTlsHostnameVerification); err != nil {
                return err
             }
        case "enableMetrics":
            if err := json.Unmarshal([]byte(v), &strct.EnableMetrics); err != nil {
                return err
             }
        case "httpRetries":
            if err := json.Unmarshal([]byte(v), &strct.HttpRetries); err != nil {
                return err
             }
        case "httpRetryPauseMs":
            if err := json.Unmarshal([]byte(v), &strct.HttpRetryPauseMs); err != nil {
                return err
             }
        case "maxTokenExpirySeconds":
            if err := json.Unmarshal([]byte(v), &strct.MaxTokenExpirySeconds); err != nil {
                return err
             }
        case "passwordSecret":
            if err := json.Unmarshal([]byte(v), &strct.PasswordSecret); err != nil {
                return err
             }
        case "readTimeoutSeconds":
            if err := json.Unmarshal([]byte(v), &strct.ReadTimeoutSeconds); err != nil {
                return err
             }
        case "refreshToken":
            if err := json.Unmarshal([]byte(v), &strct.RefreshToken); err != nil {
                return err
             }
        case "scope":
            if err := json.Unmarshal([]byte(v), &strct.Scope); err != nil {
                return err
             }
        case "tlsTrustedCertificates":
            if err := json.Unmarshal([]byte(v), &strct.TlsTrustedCertificates); err != nil {
                return err
             }
        case "tokenEndpointUri":
            if err := json.Unmarshal([]byte(v), &strct.TokenEndpointUri); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        case "username":
            if err := json.Unmarshal([]byte(v), &strct.Username); err != nil {
                return err
             }
        }
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    return nil
}

func (strct *Build) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Output" field is required
    if strct.Output == nil {
        return nil, errors.New("output is a required field")
    }
    // Marshal the "output" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"output\": ")
	if tmp, err := json.Marshal(strct.Output); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Plugins" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "plugins" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"plugins\": ")
	if tmp, err := json.Marshal(strct.Plugins); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "resources" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resources\": ")
	if tmp, err := json.Marshal(strct.Resources); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Build) UnmarshalJSON(b []byte) error {
    outputReceived := false
    pluginsReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "output":
            if err := json.Unmarshal([]byte(v), &strct.Output); err != nil {
                return err
             }
            outputReceived = true
        case "plugins":
            if err := json.Unmarshal([]byte(v), &strct.Plugins); err != nil {
                return err
             }
            pluginsReceived = true
        case "resources":
            if err := json.Unmarshal([]byte(v), &strct.Resources); err != nil {
                return err
             }
        }
    }
    // check if output (a required property) was received
    if !outputReceived {
        return errors.New("\"output\" is required but was not present")
    }
    // check if plugins (a required property) was received
    if !pluginsReceived {
        return errors.New("\"plugins\" is required but was not present")
    }
    return nil
}

func (strct *CertificateAndKey) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Certificate" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "certificate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"certificate\": ")
	if tmp, err := json.Marshal(strct.Certificate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CertificateAndKey) UnmarshalJSON(b []byte) error {
    certificateReceived := false
    keyReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "certificate":
            if err := json.Unmarshal([]byte(v), &strct.Certificate); err != nil {
                return err
             }
            certificateReceived = true
        case "key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            keyReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if certificate (a required property) was received
    if !certificateReceived {
        return errors.New("\"certificate\" is required but was not present")
    }
    // check if key (a required property) was received
    if !keyReceived {
        return errors.New("\"key\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *ClientSecret) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ClientSecret) UnmarshalJSON(b []byte) error {
    keyReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            keyReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if key (a required property) was received
    if !keyReceived {
        return errors.New("\"key\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *EnvItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ValueFrom" field is required
    if strct.ValueFrom == nil {
        return nil, errors.New("valueFrom is a required field")
    }
    // Marshal the "valueFrom" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"valueFrom\": ")
	if tmp, err := json.Marshal(strct.ValueFrom); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *EnvItems) UnmarshalJSON(b []byte) error {
    nameReceived := false
    valueFromReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            nameReceived = true
        case "valueFrom":
            if err := json.Unmarshal([]byte(v), &strct.ValueFrom); err != nil {
                return err
             }
            valueFromReceived = true
        }
    }
    // check if name (a required property) was received
    if !nameReceived {
        return errors.New("\"name\" is required but was not present")
    }
    // check if valueFrom (a required property) was received
    if !valueFromReceived {
        return errors.New("\"valueFrom\" is required but was not present")
    }
    return nil
}

func (strct *Logging) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "loggers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"loggers\": ")
	if tmp, err := json.Marshal(strct.Loggers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "valueFrom" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"valueFrom\": ")
	if tmp, err := json.Marshal(strct.ValueFrom); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Logging) UnmarshalJSON(b []byte) error {
    typeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "loggers":
            if err := json.Unmarshal([]byte(v), &strct.Loggers); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        case "valueFrom":
            if err := json.Unmarshal([]byte(v), &strct.ValueFrom); err != nil {
                return err
             }
        }
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    return nil
}

func (strct *MetricsConfig) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ValueFrom" field is required
    if strct.ValueFrom == nil {
        return nil, errors.New("valueFrom is a required field")
    }
    // Marshal the "valueFrom" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"valueFrom\": ")
	if tmp, err := json.Marshal(strct.ValueFrom); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MetricsConfig) UnmarshalJSON(b []byte) error {
    typeReceived := false
    valueFromReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        case "valueFrom":
            if err := json.Unmarshal([]byte(v), &strct.ValueFrom); err != nil {
                return err
             }
            valueFromReceived = true
        }
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    // check if valueFrom (a required property) was received
    if !valueFromReceived {
        return errors.New("\"valueFrom\" is required but was not present")
    }
    return nil
}

func (strct *Output) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "additionalKanikoOptions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"additionalKanikoOptions\": ")
	if tmp, err := json.Marshal(strct.AdditionalKanikoOptions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Image" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "image" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"image\": ")
	if tmp, err := json.Marshal(strct.Image); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "pushSecret" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"pushSecret\": ")
	if tmp, err := json.Marshal(strct.PushSecret); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Output) UnmarshalJSON(b []byte) error {
    imageReceived := false
    typeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "additionalKanikoOptions":
            if err := json.Unmarshal([]byte(v), &strct.AdditionalKanikoOptions); err != nil {
                return err
             }
        case "image":
            if err := json.Unmarshal([]byte(v), &strct.Image); err != nil {
                return err
             }
            imageReceived = true
        case "pushSecret":
            if err := json.Unmarshal([]byte(v), &strct.PushSecret); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        }
    }
    // check if image (a required property) was received
    if !imageReceived {
        return errors.New("\"image\" is required but was not present")
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    return nil
}

func (strct *PasswordSecret) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Password" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "password" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"password\": ")
	if tmp, err := json.Marshal(strct.Password); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PasswordSecret) UnmarshalJSON(b []byte) error {
    passwordReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "password":
            if err := json.Unmarshal([]byte(v), &strct.Password); err != nil {
                return err
             }
            passwordReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if password (a required property) was received
    if !passwordReceived {
        return errors.New("\"password\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *PluginsItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Artifacts" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "artifacts" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"artifacts\": ")
	if tmp, err := json.Marshal(strct.Artifacts); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *PluginsItems) UnmarshalJSON(b []byte) error {
    artifactsReceived := false
    nameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "artifacts":
            if err := json.Unmarshal([]byte(v), &strct.Artifacts); err != nil {
                return err
             }
            artifactsReceived = true
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            nameReceived = true
        }
    }
    // check if artifacts (a required property) was received
    if !artifactsReceived {
        return errors.New("\"artifacts\" is required but was not present")
    }
    // check if name (a required property) was received
    if !nameReceived {
        return errors.New("\"name\" is required but was not present")
    }
    return nil
}

func (strct *Rack) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "TopologyKey" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "topologyKey" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"topologyKey\": ")
	if tmp, err := json.Marshal(strct.TopologyKey); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Rack) UnmarshalJSON(b []byte) error {
    topologyKeyReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "topologyKey":
            if err := json.Unmarshal([]byte(v), &strct.TopologyKey); err != nil {
                return err
             }
            topologyKeyReceived = true
        }
    }
    // check if topologyKey (a required property) was received
    if !topologyKeyReceived {
        return errors.New("\"topologyKey\" is required but was not present")
    }
    return nil
}

func (strct *RefreshToken) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Key" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "key" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"key\": ")
	if tmp, err := json.Marshal(strct.Key); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *RefreshToken) UnmarshalJSON(b []byte) error {
    keyReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "key":
            if err := json.Unmarshal([]byte(v), &strct.Key); err != nil {
                return err
             }
            keyReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if key (a required property) was received
    if !keyReceived {
        return errors.New("\"key\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *Spec) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "authentication" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"authentication\": ")
	if tmp, err := json.Marshal(strct.Authentication); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "BootstrapServers" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "bootstrapServers" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"bootstrapServers\": ")
	if tmp, err := json.Marshal(strct.BootstrapServers); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "build" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"build\": ")
	if tmp, err := json.Marshal(strct.Build); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "clientRackInitImage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"clientRackInitImage\": ")
	if tmp, err := json.Marshal(strct.ClientRackInitImage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "config" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"config\": ")
	if tmp, err := json.Marshal(strct.Config); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "externalConfiguration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"externalConfiguration\": ")
	if tmp, err := json.Marshal(strct.ExternalConfiguration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "image" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"image\": ")
	if tmp, err := json.Marshal(strct.Image); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "jmxOptions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"jmxOptions\": ")
	if tmp, err := json.Marshal(strct.JmxOptions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "jvmOptions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"jvmOptions\": ")
	if tmp, err := json.Marshal(strct.JvmOptions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "livenessProbe" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"livenessProbe\": ")
	if tmp, err := json.Marshal(strct.LivenessProbe); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "logging" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"logging\": ")
	if tmp, err := json.Marshal(strct.Logging); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "metricsConfig" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"metricsConfig\": ")
	if tmp, err := json.Marshal(strct.MetricsConfig); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "rack" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"rack\": ")
	if tmp, err := json.Marshal(strct.Rack); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "readinessProbe" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"readinessProbe\": ")
	if tmp, err := json.Marshal(strct.ReadinessProbe); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "replicas" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"replicas\": ")
	if tmp, err := json.Marshal(strct.Replicas); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "resources" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resources\": ")
	if tmp, err := json.Marshal(strct.Resources); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "template" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"template\": ")
	if tmp, err := json.Marshal(strct.Template); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "tls" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"tls\": ")
	if tmp, err := json.Marshal(strct.Tls); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "tracing" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"tracing\": ")
	if tmp, err := json.Marshal(strct.Tracing); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Spec) UnmarshalJSON(b []byte) error {
    bootstrapServersReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "authentication":
            if err := json.Unmarshal([]byte(v), &strct.Authentication); err != nil {
                return err
             }
        case "bootstrapServers":
            if err := json.Unmarshal([]byte(v), &strct.BootstrapServers); err != nil {
                return err
             }
            bootstrapServersReceived = true
        case "build":
            if err := json.Unmarshal([]byte(v), &strct.Build); err != nil {
                return err
             }
        case "clientRackInitImage":
            if err := json.Unmarshal([]byte(v), &strct.ClientRackInitImage); err != nil {
                return err
             }
        case "config":
            if err := json.Unmarshal([]byte(v), &strct.Config); err != nil {
                return err
             }
        case "externalConfiguration":
            if err := json.Unmarshal([]byte(v), &strct.ExternalConfiguration); err != nil {
                return err
             }
        case "image":
            if err := json.Unmarshal([]byte(v), &strct.Image); err != nil {
                return err
             }
        case "jmxOptions":
            if err := json.Unmarshal([]byte(v), &strct.JmxOptions); err != nil {
                return err
             }
        case "jvmOptions":
            if err := json.Unmarshal([]byte(v), &strct.JvmOptions); err != nil {
                return err
             }
        case "livenessProbe":
            if err := json.Unmarshal([]byte(v), &strct.LivenessProbe); err != nil {
                return err
             }
        case "logging":
            if err := json.Unmarshal([]byte(v), &strct.Logging); err != nil {
                return err
             }
        case "metricsConfig":
            if err := json.Unmarshal([]byte(v), &strct.MetricsConfig); err != nil {
                return err
             }
        case "rack":
            if err := json.Unmarshal([]byte(v), &strct.Rack); err != nil {
                return err
             }
        case "readinessProbe":
            if err := json.Unmarshal([]byte(v), &strct.ReadinessProbe); err != nil {
                return err
             }
        case "replicas":
            if err := json.Unmarshal([]byte(v), &strct.Replicas); err != nil {
                return err
             }
        case "resources":
            if err := json.Unmarshal([]byte(v), &strct.Resources); err != nil {
                return err
             }
        case "template":
            if err := json.Unmarshal([]byte(v), &strct.Template); err != nil {
                return err
             }
        case "tls":
            if err := json.Unmarshal([]byte(v), &strct.Tls); err != nil {
                return err
             }
        case "tracing":
            if err := json.Unmarshal([]byte(v), &strct.Tracing); err != nil {
                return err
             }
        case "version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
        }
    }
    // check if bootstrapServers (a required property) was received
    if !bootstrapServersReceived {
        return errors.New("\"bootstrapServers\" is required but was not present")
    }
    return nil
}

func (strct *TlsTrustedCertificatesItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Certificate" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "certificate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"certificate\": ")
	if tmp, err := json.Marshal(strct.Certificate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TlsTrustedCertificatesItems) UnmarshalJSON(b []byte) error {
    certificateReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "certificate":
            if err := json.Unmarshal([]byte(v), &strct.Certificate); err != nil {
                return err
             }
            certificateReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if certificate (a required property) was received
    if !certificateReceived {
        return errors.New("\"certificate\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *Tracing) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Tracing) UnmarshalJSON(b []byte) error {
    typeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        }
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    return nil
}

func (strct *TrustedCertificatesItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Certificate" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "certificate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"certificate\": ")
	if tmp, err := json.Marshal(strct.Certificate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "SecretName" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "secretName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secretName\": ")
	if tmp, err := json.Marshal(strct.SecretName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TrustedCertificatesItems) UnmarshalJSON(b []byte) error {
    certificateReceived := false
    secretNameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "certificate":
            if err := json.Unmarshal([]byte(v), &strct.Certificate); err != nil {
                return err
             }
            certificateReceived = true
        case "secretName":
            if err := json.Unmarshal([]byte(v), &strct.SecretName); err != nil {
                return err
             }
            secretNameReceived = true
        }
    }
    // check if certificate (a required property) was received
    if !certificateReceived {
        return errors.New("\"certificate\" is required but was not present")
    }
    // check if secretName (a required property) was received
    if !secretNameReceived {
        return errors.New("\"secretName\" is required but was not present")
    }
    return nil
}

func (strct *VolumesItems) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "configMap" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"configMap\": ")
	if tmp, err := json.Marshal(strct.ConfigMap); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "secret" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"secret\": ")
	if tmp, err := json.Marshal(strct.Secret); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *VolumesItems) UnmarshalJSON(b []byte) error {
    nameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "configMap":
            if err := json.Unmarshal([]byte(v), &strct.ConfigMap); err != nil {
                return err
             }
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            nameReceived = true
        case "secret":
            if err := json.Unmarshal([]byte(v), &strct.Secret); err != nil {
                return err
             }
        }
    }
    // check if name (a required property) was received
    if !nameReceived {
        return errors.New("\"name\" is required but was not present")
    }
    return nil
}
