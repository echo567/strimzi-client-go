// Code generated by schema-generate. DO NOT EDIT.

package v1beta2

// ConditionsItems 
type ConditionsItems struct {

  // Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
  LastTransitionTime string `json:"lastTransitionTime,omitempty"`

  // Human-readable message indicating details about the condition's last transition.
  Message string `json:"message,omitempty"`

  // The reason for the condition's last transition (a single word in CamelCase).
  Reason string `json:"reason,omitempty"`

  // The status of the condition, either True, False or Unknown.
  Status string `json:"status,omitempty"`

  // The unique identifier of a condition, used to distinguish between other conditions in the resource.
  Type string `json:"type,omitempty"`
}

// Config The topic configuration.
type Config struct {
}

// KafkaTopic 
type KafkaTopic struct {

  // The specification of the topic.
  Spec *Spec `json:"spec,omitempty"`

  // The status of the topic.
  Status *Status `json:"status,omitempty"`
}

// Spec The specification of the topic.
type Spec struct {

  // The topic configuration.
  Config *Config `json:"config,omitempty"`

  // The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
  Partitions int `json:"partitions,omitempty"`

  // The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
  Replicas int `json:"replicas,omitempty"`

  // The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
  TopicName string `json:"topicName,omitempty"`
}

// Status The status of the topic.
type Status struct {

  // List of status conditions.
  Conditions []*ConditionsItems `json:"conditions,omitempty"`

  // The generation of the CRD that was last reconciled by the operator.
  ObservedGeneration int `json:"observedGeneration,omitempty"`

  // Topic name.
  TopicName string `json:"topicName,omitempty"`
}
